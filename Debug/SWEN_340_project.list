
SWEN_340_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028ec  080028ec  00026f94  2**0
                  CONTENTS
  4 .ARM          00000000  080028ec  080028ec  00026f94  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028ec  080028ec  00026f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00006f94  20000000  080028f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20006f94  08009888  00026f94  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007050  08009888  00027050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00026f94  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005de4  00000000  00000000  00026fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001715  00000000  00000000  0002cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000448  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027310  00000000  00000000  0002ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000833b  00000000  00000000  00056168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7946  00000000  00000000  0005e4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155de9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b8  00000000  00000000  00155e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20006f94 	.word	0x20006f94
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002544 	.word	0x08002544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20006f98 	.word	0x20006f98
 80001cc:	08002544 	.word	0x08002544

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Error_Handler>:
#include "systick.h"

uint8_t one_second_elapsed = FALSE;
uint32_t counter = 0;

void Error_Handler () {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// Add error handler here if desired
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
	...

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	; (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	; 0x28
 80002e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <GPIO_Init+0xc4>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a2a      	ldr	r2, [pc, #168]	; (80003a0 <GPIO_Init+0xc4>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <GPIO_Init+0xc4>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <GPIO_Init+0xc4>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a24      	ldr	r2, [pc, #144]	; (80003a0 <GPIO_Init+0xc4>)
 8000310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <GPIO_Init+0xc4>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <GPIO_Init+0xc4>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a1e      	ldr	r2, [pc, #120]	; (80003a0 <GPIO_Init+0xc4>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <GPIO_Init+0xc4>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <GPIO_Init+0xc4>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <GPIO_Init+0xc4>)
 8000340:	f043 0302 	orr.w	r3, r3, #2
 8000344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <GPIO_Init+0xc4>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000356:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000358:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800035c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	4619      	mov	r1, r3
 8000368:	480e      	ldr	r0, [pc, #56]	; (80003a4 <GPIO_Init+0xc8>)
 800036a:	f001 fa4b 	bl	8001804 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 800036e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000372:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000374:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000378:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	4619      	mov	r1, r3
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f001 fa3c 	bl	8001804 <HAL_GPIO_Init>

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800038c:	2028      	movs	r0, #40	; 0x28
 800038e:	f7ff ff87 	bl	80002a0 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000392:	2017      	movs	r0, #23
 8000394:	f7ff ff84 	bl	80002a0 <__NVIC_EnableIRQ>

}
 8000398:	bf00      	nop
 800039a:	3728      	adds	r7, #40	; 0x28
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	48000800 	.word	0x48000800

080003a8 <EXTI15_10_IRQHandler>:
	// This is the interrupt handler for the external buttons (S1)

}

//blue button
void EXTI15_10_IRQHandler(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4821      	ldr	r0, [pc, #132]	; (8000438 <EXTI15_10_IRQHandler+0x90>)
 80003b4:	f001 fbd0 	bl	8001b58 <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(B1_GPIO_Port, B1_Pin);
 80003bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c0:	481d      	ldr	r0, [pc, #116]	; (8000438 <EXTI15_10_IRQHandler+0x90>)
 80003c2:	f001 fbe1 	bl	8001b88 <HAL_GPIO_TogglePin>
	while(state != switched){
 80003c6:	e006      	b.n	80003d6 <EXTI15_10_IRQHandler+0x2e>
		state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80003c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003cc:	481a      	ldr	r0, [pc, #104]	; (8000438 <EXTI15_10_IRQHandler+0x90>)
 80003ce:	f001 fbc3 	bl	8001b58 <HAL_GPIO_ReadPin>
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	while(state != switched){
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <EXTI15_10_IRQHandler+0x94>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d1f3      	bne.n	80003c8 <EXTI15_10_IRQHandler+0x20>
	}
	if(state == 1){
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d10b      	bne.n	80003fe <EXTI15_10_IRQHandler+0x56>
		switched = 0;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <EXTI15_10_IRQHandler+0x94>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
		remote = 0;
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <EXTI15_10_IRQHandler+0x98>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
		local = 1;
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <EXTI15_10_IRQHandler+0x9c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	601a      	str	r2, [r3, #0]
		printf("\n\r***MANUAL OVERRIDE MODE ACTIVE***\n\r");
 80003f8:	4813      	ldr	r0, [pc, #76]	; (8000448 <EXTI15_10_IRQHandler+0xa0>)
 80003fa:	f000 fe19 	bl	8001030 <printf>
	}
	if(state == 0){
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <EXTI15_10_IRQHandler+0x80>
		switched = 1;
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <EXTI15_10_IRQHandler+0x94>)
 8000406:	2201      	movs	r2, #1
 8000408:	601a      	str	r2, [r3, #0]
		remote = 1;
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <EXTI15_10_IRQHandler+0x98>)
 800040c:	2201      	movs	r2, #1
 800040e:	701a      	strb	r2, [r3, #0]
		local = 0;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <EXTI15_10_IRQHandler+0x9c>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
		LED_Off(PROJECT_LED);
 8000416:	2007      	movs	r0, #7
 8000418:	f000 f980 	bl	800071c <LED_Off>
		blink = 0;
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <EXTI15_10_IRQHandler+0xa4>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
		printf("\n\r***REMOTE MODE ACTIVE***\n\r");
 8000422:	480b      	ldr	r0, [pc, #44]	; (8000450 <EXTI15_10_IRQHandler+0xa8>)
 8000424:	f000 fe04 	bl	8001030 <printf>
	}
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800042c:	f001 fbc6 	bl	8001bbc <HAL_GPIO_EXTI_IRQHandler>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	48000800 	.word	0x48000800
 800043c:	20000000 	.word	0x20000000
 8000440:	20000004 	.word	0x20000004
 8000444:	20006fb4 	.word	0x20006fb4
 8000448:	0800255c 	.word	0x0800255c
 800044c:	20006fb8 	.word	0x20006fb8
 8000450:	08002584 	.word	0x08002584

08000454 <EXTI9_5_IRQHandler>:

//s1 button
void EXTI9_5_IRQHandler(){
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
	if(local == 1){
 800045a:	4b62      	ldr	r3, [pc, #392]	; (80005e4 <EXTI9_5_IRQHandler+0x190>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	f040 80b8 	bne.w	80005d4 <EXTI9_5_IRQHandler+0x180>
		GPIO_PinState state = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8000464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f001 fb74 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	71fb      	strb	r3, [r7, #7]
		if(state == GPIO_PIN_SET){
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d111      	bne.n	800049e <EXTI9_5_IRQHandler+0x4a>
			if(presses == 0){
 800047a:	4b5b      	ldr	r3, [pc, #364]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <EXTI9_5_IRQHandler+0x38>
				reset();
 8000482:	f000 feb9 	bl	80011f8 <reset>
				one_second = 0;
 8000486:	4b59      	ldr	r3, [pc, #356]	; (80005ec <EXTI9_5_IRQHandler+0x198>)
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
			}
			presses++;
 800048c:	4b56      	ldr	r3, [pc, #344]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a55      	ldr	r2, [pc, #340]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 8000494:	6013      	str	r3, [r2, #0]
			HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000496:	f44f 7000 	mov.w	r0, #512	; 0x200
 800049a:	f001 fb8f 	bl	8001bbc <HAL_GPIO_EXTI_IRQHandler>
		}
		if(state == 0){
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f040 8097 	bne.w	80005d4 <EXTI9_5_IRQHandler+0x180>
			if (presses > 1 && *get_count() <= 2){
 80004a6:	4b50      	ldr	r3, [pc, #320]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	dd08      	ble.n	80004c0 <EXTI9_5_IRQHandler+0x6c>
 80004ae:	f000 fe4b 	bl	8001148 <get_count>
 80004b2:	4603      	mov	r3, r0
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d802      	bhi.n	80004c0 <EXTI9_5_IRQHandler+0x6c>
				presses = 1;
 80004ba:	4b4b      	ldr	r3, [pc, #300]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 80004bc:	2201      	movs	r2, #1
 80004be:	601a      	str	r2, [r3, #0]
			}
			if(presses == 1 && *get_count() > 10){
 80004c0:	4b49      	ldr	r3, [pc, #292]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d11a      	bne.n	80004fe <EXTI9_5_IRQHandler+0xaa>
 80004c8:	f000 fe3e 	bl	8001148 <get_count>
 80004cc:	4603      	mov	r3, r0
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b0a      	cmp	r3, #10
 80004d2:	d914      	bls.n	80004fe <EXTI9_5_IRQHandler+0xaa>
				LED_Off(PROJECT_LED);
 80004d4:	2007      	movs	r0, #7
 80004d6:	f000 f921 	bl	800071c <LED_Off>
				first = 1;
 80004da:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <EXTI9_5_IRQHandler+0x19c>)
 80004dc:	2201      	movs	r2, #1
 80004de:	601a      	str	r2, [r3, #0]
				printf("stopped song\n\r");
 80004e0:	4844      	ldr	r0, [pc, #272]	; (80005f4 <EXTI9_5_IRQHandler+0x1a0>)
 80004e2:	f000 fda5 	bl	8001030 <printf>
				presses = 0;
 80004e6:	4b40      	ldr	r3, [pc, #256]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
				one_second = 0;
 80004ec:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <EXTI9_5_IRQHandler+0x198>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
				paused = 0;
 80004f2:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <EXTI9_5_IRQHandler+0x1a4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
				first = 0;
 80004f8:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <EXTI9_5_IRQHandler+0x19c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]

			}
			if(presses >= 2 && *get_count() < 10){
 80004fe:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	dd22      	ble.n	800054c <EXTI9_5_IRQHandler+0xf8>
 8000506:	f000 fe1f 	bl	8001148 <get_count>
 800050a:	4603      	mov	r3, r0
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b09      	cmp	r3, #9
 8000510:	d81c      	bhi.n	800054c <EXTI9_5_IRQHandler+0xf8>
				first = 0;
 8000512:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <EXTI9_5_IRQHandler+0x19c>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
				presses = 0;
 8000518:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
				one_second = 0;
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <EXTI9_5_IRQHandler+0x198>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
				if(player == 5){
 8000524:	4b35      	ldr	r3, [pc, #212]	; (80005fc <EXTI9_5_IRQHandler+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b05      	cmp	r3, #5
 800052a:	d103      	bne.n	8000534 <EXTI9_5_IRQHandler+0xe0>
					player = 0;
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <EXTI9_5_IRQHandler+0x1a8>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
				if(player == 5){
 8000532:	e049      	b.n	80005c8 <EXTI9_5_IRQHandler+0x174>
				}
				else{
					midi_track(player);
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <EXTI9_5_IRQHandler+0x1a8>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fc6f 	bl	8000e1c <midi_track>
					player++;
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <EXTI9_5_IRQHandler+0x1a8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <EXTI9_5_IRQHandler+0x1a8>)
 8000548:	701a      	strb	r2, [r3, #0]
				if(player == 5){
 800054a:	e03d      	b.n	80005c8 <EXTI9_5_IRQHandler+0x174>
				}

			}
			else if((presses == 1) && (first == 0)){
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d110      	bne.n	8000576 <EXTI9_5_IRQHandler+0x122>
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <EXTI9_5_IRQHandler+0x19c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d10c      	bne.n	8000576 <EXTI9_5_IRQHandler+0x122>
				LED_On(PROJECT_LED);
 800055c:	2007      	movs	r0, #7
 800055e:	f000 f8c7 	bl	80006f0 <LED_On>
				first = 1;
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <EXTI9_5_IRQHandler+0x19c>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
				printf("playing song\n\r");
 8000568:	4825      	ldr	r0, [pc, #148]	; (8000600 <EXTI9_5_IRQHandler+0x1ac>)
 800056a:	f000 fd61 	bl	8001030 <printf>
				presses = 0;
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e028      	b.n	80005c8 <EXTI9_5_IRQHandler+0x174>
				//play_song(player);

			}
			else if ((presses == 1) && (first == 1)){
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d121      	bne.n	80005c2 <EXTI9_5_IRQHandler+0x16e>
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <EXTI9_5_IRQHandler+0x19c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d11d      	bne.n	80005c2 <EXTI9_5_IRQHandler+0x16e>
				if (paused == 1){
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <EXTI9_5_IRQHandler+0x1a4>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10f      	bne.n	80005ae <EXTI9_5_IRQHandler+0x15a>
					paused = 0;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <EXTI9_5_IRQHandler+0x1a4>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
					first = 1;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <EXTI9_5_IRQHandler+0x19c>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
					printf("song resumed\n\r");
 800059a:	481a      	ldr	r0, [pc, #104]	; (8000604 <EXTI9_5_IRQHandler+0x1b0>)
 800059c:	f000 fd48 	bl	8001030 <printf>
					LED_On(PROJECT_LED);
 80005a0:	2007      	movs	r0, #7
 80005a2:	f000 f8a5 	bl	80006f0 <LED_On>
					presses = 0;
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
				if (paused == 1){
 80005ac:	e00c      	b.n	80005c8 <EXTI9_5_IRQHandler+0x174>

				}
				else{
					paused = 1;
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <EXTI9_5_IRQHandler+0x1a4>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
					presses = 0;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
					printf("song paused\n\r");
 80005ba:	4813      	ldr	r0, [pc, #76]	; (8000608 <EXTI9_5_IRQHandler+0x1b4>)
 80005bc:	f000 fd38 	bl	8001030 <printf>
				if (paused == 1){
 80005c0:	e002      	b.n	80005c8 <EXTI9_5_IRQHandler+0x174>

				}
			}
			else{
				presses = 0;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <EXTI9_5_IRQHandler+0x194>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
			}
			reset();
 80005c8:	f000 fe16 	bl	80011f8 <reset>
			HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80005cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d0:	f001 faf4 	bl	8001bbc <HAL_GPIO_EXTI_IRQHandler>
		}
	}
	HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80005d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d8:	f001 faf0 	bl	8001bbc <HAL_GPIO_EXTI_IRQHandler>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20006fb4 	.word	0x20006fb4
 80005e8:	20006fb0 	.word	0x20006fb0
 80005ec:	20006fbc 	.word	0x20006fbc
 80005f0:	20006fc4 	.word	0x20006fc4
 80005f4:	080025a4 	.word	0x080025a4
 80005f8:	20006fc1 	.word	0x20006fc1
 80005fc:	20006fc0 	.word	0x20006fc0
 8000600:	080025b4 	.word	0x080025b4
 8000604:	080025c4 	.word	0x080025c4
 8000608:	080025d4 	.word	0x080025d4

0800060c <get_remote>:

int* get_local(){
	return &local;
}

uint8_t* get_remote(){
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	return &remote;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <get_remote+0x10>)
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000004 	.word	0x20000004

08000620 <get_paused>:

uint8_t* get_paused(){
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	return &paused;
 8000624:	4b02      	ldr	r3, [pc, #8]	; (8000630 <get_paused+0x10>)
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	20006fc1 	.word	0x20006fc1

08000634 <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(uint16_t led_pin){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 800063e:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <LED_Init+0xb8>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <LED_Init+0xb8>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*led_pin));
 800064a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	2103      	movs	r1, #3
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	43db      	mvns	r3, r3
 800065c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000660:	4013      	ands	r3, r2
 8000662:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*led_pin);      //  Output(01)
 8000664:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	2101      	movs	r1, #1
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000678:	4313      	orrs	r3, r2
 800067a:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*led_pin));
 800067c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	2103      	movs	r1, #3
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	43db      	mvns	r3, r3
 800068e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000692:	4013      	ands	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*led_pin);  // High speed
 8000696:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	2103      	movs	r1, #3
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80006aa:	4313      	orrs	r3, r2
 80006ac:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<led_pin);       // Push-pull
 80006ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	2101      	movs	r1, #1
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80006c2:	4013      	ands	r3, r2
 80006c4:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*led_pin));  // No pull-up, no pull-down
 80006c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	2103      	movs	r1, #3
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43db      	mvns	r3, r3
 80006d8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80006dc:	4013      	ands	r3, r2
 80006de:	60cb      	str	r3, [r1, #12]
	
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000

080006f0 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(uint16_t led_pin){
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR |= (1UL<<led_pin);
 80006fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800070c:	4313      	orrs	r3, r2
 800070e:	614b      	str	r3, [r1, #20]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(uint16_t led_pin){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR &= ~(1UL<<led_pin);
 8000726:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800072a:	695a      	ldr	r2, [r3, #20]
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	2101      	movs	r1, #1
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800073a:	4013      	ands	r3, r2
 800073c:	614b      	str	r3, [r1, #20]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(uint16_t led_pin){
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR ^= (1UL<<led_pin);
 8000754:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000766:	4053      	eors	r3, r2
 8000768:	614b      	str	r3, [r1, #20]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <UART2_Init>:
#define TX_PIN 2
#define RX_PIN 3

static thingy buffer1;

void UART2_Init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <UART2_Init+0x4c>)
 800077e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000780:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <UART2_Init+0x4c>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <UART2_Init+0x4c>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <UART2_Init+0x4c>)
 8000790:	f023 030c 	bic.w	r3, r3, #12
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <UART2_Init+0x4c>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <UART2_Init+0x4c>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	USART2->CR1 |= 1 << 5; //enable rxneie
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <UART2_Init+0x50>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <UART2_Init+0x50>)
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6013      	str	r3, [r2, #0]

	UART2_GPIO_Init();
 80007b4:	f000 f80a 	bl	80007cc <UART2_GPIO_Init>
	USART_Init(USART2);
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <UART2_Init+0x50>)
 80007ba:	f000 f84f 	bl	800085c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40004400 	.word	0x40004400

080007cc <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <UART2_GPIO_Init+0x8c>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <UART2_GPIO_Init+0x8c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80007dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80007ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007f6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80007fa:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80007fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800080a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 800080c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000816:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800081a:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 800081c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000826:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800082a:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 800082c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800083a:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 800083c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000846:	f023 030c 	bic.w	r3, r3, #12
 800084a:	6053      	str	r3, [r2, #4]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f023 0201 	bic.w	r2, r3, #1
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f242 028d 	movw	r2, #8333	; 0x208d
 800089a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f043 020c 	orr.w	r2, r3, #12
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a2c      	ldr	r2, [pc, #176]	; (800095c <USART_Init+0x100>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d129      	bne.n	8000904 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f043 0220 	orr.w	r2, r3, #32
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f023 0210 	bic.w	r2, r3, #16
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f023 0201 	bic.w	r2, r3, #1
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <USART_Init+0x104>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d10b      	bne.n	8000924 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <USART_Init+0x108>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	4a11      	ldr	r2, [pc, #68]	; (8000964 <USART_Init+0x108>)
 800091e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000922:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000930:	bf00      	nop
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f9      	beq.n	8000932 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800093e:	bf00      	nop
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f9      	beq.n	8000940 <USART_Init+0xe4>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40004c00 	.word	0x40004c00
 8000960:	40004400 	.word	0x40004400
 8000964:	40013800 	.word	0x40013800

08000968 <USART_Read_NB>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

uint8_t USART_Read_NB (USART_TypeDef * USARTx) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if ((USARTx->ISR & USART_ISR_RXNE)){ // Wait until RXNE (RX not empty) bit is set
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	f003 0320 	and.w	r3, r3, #32
 8000978:	2b00      	cmp	r3, #0
 800097a:	d004      	beq.n	8000986 <USART_Read_NB+0x1e>
		// USART resets the RXNE flag automatically after reading DR
		return ((uint8_t)(USARTx->RDR & 0xFF));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	e000      	b.n	8000988 <USART_Read_NB+0x20>
		// Reading USART_DR automatically clears the RXNE flag
	}
	else{
		return 0;
 8000986:	2300      	movs	r3, #0
	}
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e014      	b.n	80009d0 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80009a6:	bf00      	nop
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f9      	beq.n	80009a8 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b29a      	uxth	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80009c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009c6:	f000 f819 	bl	80009fc <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8e6      	bhi.n	80009a6 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80009d8:	bf00      	nop
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0f9      	beq.n	80009da <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	61da      	str	r2, [r3, #28]
}   
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2264      	movs	r2, #100	; 0x64
 8000a08:	fb03 f202 	mul.w	r2, r3, r2
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <USART_Delay+0x3c>)
 8000a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a12:	1ad2      	subs	r2, r2, r3
 8000a14:	0852      	lsrs	r2, r2, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1f9      	bne.n	8000a1c <USART_Delay+0x20>
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	24924925 	.word	0x24924925

08000a3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <HAL_DAC_MspInit+0x74>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d124      	bne.n	8000aa8 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_DAC_MspInit+0x78>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <HAL_DAC_MspInit+0x78>)
 8000a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_DAC_MspInit+0x78>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_DAC_MspInit+0x78>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_DAC_MspInit+0x78>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_DAC_MspInit+0x78>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 feae 	bl	8001804 <HAL_GPIO_Init>
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40007400 	.word	0x40007400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2224      	movs	r2, #36	; 0x24
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 f8c7 	bl	8001c58 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <DAC_Init+0x5c>)
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <DAC_Init+0x60>)
 8000ace:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <DAC_Init+0x5c>)
 8000ad2:	f000 fd0d 	bl	80014f0 <HAL_DAC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <DAC_Init+0x28>
  {
    Error_Handler();
 8000adc:	f7ff fbd8 	bl	8000290 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <DAC_Init+0x5c>)
 8000afc:	f000 fd67 	bl	80015ce <HAL_DAC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <DAC_Init+0x52>
  {
    Error_Handler();
 8000b06:	f7ff fbc3 	bl	8000290 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20006fc8 	.word	0x20006fc8
 8000b18:	40007400 	.word	0x40007400

08000b1c <DAC_Start>:

void DAC_Start () {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 8000b20:	2100      	movs	r1, #0
 8000b22:	4802      	ldr	r0, [pc, #8]	; (8000b2c <DAC_Start+0x10>)
 8000b24:	f000 fd06 	bl	8001534 <HAL_DAC_Start>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20006fc8 	.word	0x20006fc8

08000b30 <get_song>:
// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

//gets songs and prints track number
song get_song (uint8_t song_number){
 8000b30:	b490      	push	{r4, r7}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <get_song+0x2c>)
 8000b42:	460c      	mov	r4, r1
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b4c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc90      	pop	{r4, r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20006f00 	.word	0x20006f00

08000b60 <get_title>:
	printf("Tracks: %i\n\r",convert_to_uint16((uint8_t*)&songinfo->tracks));
	printf("Division: %i\n\r",convert_to_uint16((uint8_t*)&songinfo->division));
}

//gets the length of the title, and builds the title in a char array
title_info get_title(unsigned char* song){
 8000b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b64:	b08b      	sub	sp, #44	; 0x2c
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
	title_info info;
	info.length = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
	int first = *song;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	61bb      	str	r3, [r7, #24]
	++song;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
	int second = *song;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	61fb      	str	r3, [r7, #28]
	int loop = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
	while (loop == 0){
 8000b86:	e00f      	b.n	8000ba8 <get_title+0x48>
		first = second;
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	61bb      	str	r3, [r7, #24]
		++song;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	603b      	str	r3, [r7, #0]
		second = *song;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	61fb      	str	r3, [r7, #28]
		if (first == 255 && second == 3){
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	2bff      	cmp	r3, #255	; 0xff
 8000b9c:	d104      	bne.n	8000ba8 <get_title+0x48>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d101      	bne.n	8000ba8 <get_title+0x48>
				loop = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
	while (loop == 0){
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0ec      	beq.n	8000b88 <get_title+0x28>
			}
	}
	++song;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
	info.length = (int) *song;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	60bb      	str	r3, [r7, #8]
	char title[info.length+1];
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1c59      	adds	r1, r3, #1
 8000bbe:	466b      	mov	r3, sp
 8000bc0:	461e      	mov	r6, r3
 8000bc2:	1e4b      	subs	r3, r1, #1
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4690      	mov	r8, r2
 8000bcc:	4699      	mov	r9, r3
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	f04f 0300 	mov.w	r3, #0
 8000bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000be2:	460a      	mov	r2, r1
 8000be4:	2300      	movs	r3, #0
 8000be6:	4614      	mov	r4, r2
 8000be8:	461d      	mov	r5, r3
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	00eb      	lsls	r3, r5, #3
 8000bf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bf8:	00e2      	lsls	r2, r4, #3
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	3307      	adds	r3, #7
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	ebad 0d03 	sub.w	sp, sp, r3
 8000c06:	466b      	mov	r3, sp
 8000c08:	3300      	adds	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
	for (int i =0; i <= info.length; i++){
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c10:	e00c      	b.n	8000c2c <get_title+0xcc>
		++song;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	603b      	str	r3, [r7, #0]
		title[i] = (char)*song;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	7819      	ldrb	r1, [r3, #0]
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	4413      	add	r3, r2
 8000c22:	460a      	mov	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
	for (int i =0; i <= info.length; i++){
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	3301      	adds	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c30:	429a      	cmp	r2, r3
 8000c32:	ddee      	ble.n	8000c12 <get_title+0xb2>
	}
	printf("Title: %s\n\r", title);
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <get_title+0xf8>)
 8000c38:	f000 f9fa 	bl	8001030 <printf>
	return info;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c48:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c4c:	46b5      	mov	sp, r6
}
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	372c      	adds	r7, #44	; 0x2c
 8000c52:	46bd      	mov	sp, r7
 8000c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c58:	08002638 	.word	0x08002638

08000c5c <get_copyright>:

//gets the length of the copyright, and builds the copyright in a char array
copyright_info get_copyright(unsigned char* song){
 8000c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c60:	b08b      	sub	sp, #44	; 0x2c
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	copyright_info info;
	info.length = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
	int first = *song;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	61bb      	str	r3, [r7, #24]
	++song;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	603b      	str	r3, [r7, #0]
	int second = *song;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	61fb      	str	r3, [r7, #28]
	int loop = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
	while (loop == 0){
 8000c82:	e063      	b.n	8000d4c <get_copyright+0xf0>
		first = second;
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	61bb      	str	r3, [r7, #24]
		++song;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	603b      	str	r3, [r7, #0]
		second = *song;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	61fb      	str	r3, [r7, #28]
		if (first == 255 && second == 2){
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2bff      	cmp	r3, #255	; 0xff
 8000c98:	d14d      	bne.n	8000d36 <get_copyright+0xda>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d14a      	bne.n	8000d36 <get_copyright+0xda>
 8000ca0:	466b      	mov	r3, sp
 8000ca2:	461e      	mov	r6, r3
			++song;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	603b      	str	r3, [r7, #0]
			info.length = (int) *song;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	60bb      	str	r3, [r7, #8]
			char title[info.length+1];
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c59      	adds	r1, r3, #1
 8000cb4:	1e4b      	subs	r3, r1, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	460a      	mov	r2, r1
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	00eb      	lsls	r3, r5, #3
 8000cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cce:	00e2      	lsls	r2, r4, #3
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	4690      	mov	r8, r2
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ce4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ce8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cec:	460b      	mov	r3, r1
 8000cee:	3307      	adds	r3, #7
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	ebad 0d03 	sub.w	sp, sp, r3
 8000cf8:	466b      	mov	r3, sp
 8000cfa:	3300      	adds	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
			for (int i =0; i < info.length; i++){
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
 8000d02:	e00c      	b.n	8000d1e <get_copyright+0xc2>
				++song;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	603b      	str	r3, [r7, #0]
				title[i] = (char)*song;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	7819      	ldrb	r1, [r3, #0]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	4413      	add	r3, r2
 8000d14:	460a      	mov	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]
			for (int i =0; i < info.length; i++){
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbee      	blt.n	8000d04 <get_copyright+0xa8>
			}
			printf("Copyright: %s\n\r", title);
 8000d26:	6939      	ldr	r1, [r7, #16]
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <get_copyright+0x110>)
 8000d2a:	f000 f981 	bl	8001030 <printf>
			loop = 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	46b5      	mov	sp, r6
		if (first == 255 && second == 2){
 8000d34:	e00a      	b.n	8000d4c <get_copyright+0xf0>
		}
		else if (first == 47 && second == 0){
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	2b2f      	cmp	r3, #47	; 0x2f
 8000d3a:	d107      	bne.n	8000d4c <get_copyright+0xf0>
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d104      	bne.n	8000d4c <get_copyright+0xf0>
			loop = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	623b      	str	r3, [r7, #32]
			printf("Copyright: None\n\r");
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <get_copyright+0x114>)
 8000d48:	f000 f972 	bl	8001030 <printf>
	while (loop == 0){
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d098      	beq.n	8000c84 <get_copyright+0x28>
		}
	}
	return info;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	461a      	mov	r2, r3
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d5e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	372c      	adds	r7, #44	; 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d6c:	08002644 	.word	0x08002644
 8000d70:	08002654 	.word	0x08002654

08000d74 <get_tempo>:

//finds where tempo is in the file and adds the numbers to a uin32_t number and converts it to a uint24_t
tempo_info get_tempo(unsigned char* song){
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	tempo_info song_tempo;
	song_tempo.tempo = 0x00000000;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
	int first = *song;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	617b      	str	r3, [r7, #20]
	++song;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	603b      	str	r3, [r7, #0]
	int second = *song;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	61fb      	str	r3, [r7, #28]
	int loop = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
	while (loop == 0){
 8000d98:	e00f      	b.n	8000dba <get_tempo+0x46>
		first = second;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	617b      	str	r3, [r7, #20]
		++song;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
		second = *song;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	61fb      	str	r3, [r7, #28]
		if (first == 255 && second == 81){
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2bff      	cmp	r3, #255	; 0xff
 8000dae:	d104      	bne.n	8000dba <get_tempo+0x46>
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	2b51      	cmp	r3, #81	; 0x51
 8000db4:	d101      	bne.n	8000dba <get_tempo+0x46>
			loop = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
	while (loop == 0){
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0ec      	beq.n	8000d9a <get_tempo+0x26>
		}
	}
	++song;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	603b      	str	r3, [r7, #0]
	++song;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	603b      	str	r3, [r7, #0]
	song_tempo.tempo |= (uint32_t)*song<<16;
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
	++song;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	603b      	str	r3, [r7, #0]
	song_tempo.tempo |= (uint32_t)*song<<8;
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
	++song;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
	song_tempo.tempo |= (uint32_t)*song;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
	song_tempo.pointer = song;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	613b      	str	r3, [r7, #16]
	return song_tempo;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	461a      	mov	r2, r3
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <midi_track>:

//gets the data associated with the specific track
void midi_track(int track){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	//midi_header(track);
	unsigned char* song = get_song(track).p_song;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fe7e 	bl	8000b30 <get_song>
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
	tempo_info tempo = get_tempo(song);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff98 	bl	8000d74 <get_tempo>
	title_info title = get_title(song);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fe88 	bl	8000b60 <get_title>
	copyright_info copyright = get_copyright(song);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff00 	bl	8000c5c <get_copyright>
	printf("Tempo: %lu\n\r", tempo.tempo);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <midi_track+0x54>)
 8000e62:	f000 f8e5 	bl	8001030 <printf>
	title = title;
	copyright = copyright;
}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	08002668 	.word	0x08002668

08000e74 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000e7a:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <System_Clock_Init+0x1b4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a6a      	ldr	r2, [pc, #424]	; (8001028 <System_Clock_Init+0x1b4>)
 8000e80:	f023 0307 	bic.w	r3, r3, #7
 8000e84:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <System_Clock_Init+0x1b4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a67      	ldr	r2, [pc, #412]	; (8001028 <System_Clock_Init+0x1b4>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 8000e92:	4b66      	ldr	r3, [pc, #408]	; (800102c <System_Clock_Init+0x1b8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a65      	ldr	r2, [pc, #404]	; (800102c <System_Clock_Init+0x1b8>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000e9e:	bf00      	nop
 8000ea0:	4b62      	ldr	r3, [pc, #392]	; (800102c <System_Clock_Init+0x1b8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f9      	beq.n	8000ea0 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000eac:	2310      	movs	r3, #16
 8000eae:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <System_Clock_Init+0x1b8>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a5d      	ldr	r2, [pc, #372]	; (800102c <System_Clock_Init+0x1b8>)
 8000eb6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000eba:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000ebc:	4b5b      	ldr	r3, [pc, #364]	; (800102c <System_Clock_Init+0x1b8>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	061b      	lsls	r3, r3, #24
 8000ec4:	4959      	ldr	r1, [pc, #356]	; (800102c <System_Clock_Init+0x1b8>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000eca:	4b58      	ldr	r3, [pc, #352]	; (800102c <System_Clock_Init+0x1b8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a57      	ldr	r2, [pc, #348]	; (800102c <System_Clock_Init+0x1b8>)
 8000ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ed4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000ed6:	bf00      	nop
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <System_Clock_Init+0x1b8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ee4:	d0f8      	beq.n	8000ed8 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000ee6:	4b51      	ldr	r3, [pc, #324]	; (800102c <System_Clock_Init+0x1b8>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	4a50      	ldr	r2, [pc, #320]	; (800102c <System_Clock_Init+0x1b8>)
 8000eec:	f023 0303 	bic.w	r3, r3, #3
 8000ef0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000ef2:	4b4e      	ldr	r3, [pc, #312]	; (800102c <System_Clock_Init+0x1b8>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4a4d      	ldr	r2, [pc, #308]	; (800102c <System_Clock_Init+0x1b8>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000efe:	4b4b      	ldr	r3, [pc, #300]	; (800102c <System_Clock_Init+0x1b8>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000f06:	4a49      	ldr	r2, [pc, #292]	; (800102c <System_Clock_Init+0x1b8>)
 8000f08:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000f0c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000f0e:	4b47      	ldr	r3, [pc, #284]	; (800102c <System_Clock_Init+0x1b8>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f16:	4a45      	ldr	r2, [pc, #276]	; (800102c <System_Clock_Init+0x1b8>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000f1e:	4b43      	ldr	r3, [pc, #268]	; (800102c <System_Clock_Init+0x1b8>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	4a42      	ldr	r2, [pc, #264]	; (800102c <System_Clock_Init+0x1b8>)
 8000f24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000f28:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000f2a:	4b40      	ldr	r3, [pc, #256]	; (800102c <System_Clock_Init+0x1b8>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	; (800102c <System_Clock_Init+0x1b8>)
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f34:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000f36:	4b3d      	ldr	r3, [pc, #244]	; (800102c <System_Clock_Init+0x1b8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a3c      	ldr	r2, [pc, #240]	; (800102c <System_Clock_Init+0x1b8>)
 8000f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f40:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000f42:	bf00      	nop
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <System_Clock_Init+0x1b8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f9      	beq.n	8000f44 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <System_Clock_Init+0x1b8>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	4a35      	ldr	r2, [pc, #212]	; (800102c <System_Clock_Init+0x1b8>)
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000f5c:	4b33      	ldr	r3, [pc, #204]	; (800102c <System_Clock_Init+0x1b8>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a32      	ldr	r2, [pc, #200]	; (800102c <System_Clock_Init+0x1b8>)
 8000f62:	f043 0303 	orr.w	r3, r3, #3
 8000f66:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000f68:	bf00      	nop
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <System_Clock_Init+0x1b8>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b0c      	cmp	r3, #12
 8000f74:	d1f9      	bne.n	8000f6a <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000f76:	4b2d      	ldr	r3, [pc, #180]	; (800102c <System_Clock_Init+0x1b8>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	4a2c      	ldr	r2, [pc, #176]	; (800102c <System_Clock_Init+0x1b8>)
 8000f7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f80:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <System_Clock_Init+0x1b8>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4a29      	ldr	r2, [pc, #164]	; (800102c <System_Clock_Init+0x1b8>)
 8000f88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f8c:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <System_Clock_Init+0x1b8>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	4a26      	ldr	r2, [pc, #152]	; (800102c <System_Clock_Init+0x1b8>)
 8000f94:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f98:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <System_Clock_Init+0x1b8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <System_Clock_Init+0x1b8>)
 8000fa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000fa4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 8000fa6:	bf00      	nop
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <System_Clock_Init+0x1b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000fb4:	d0f8      	beq.n	8000fa8 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <System_Clock_Init+0x1b8>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <System_Clock_Init+0x1b8>)
 8000fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000fc0:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <System_Clock_Init+0x1b8>)
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	4a19      	ldr	r2, [pc, #100]	; (800102c <System_Clock_Init+0x1b8>)
 8000fc8:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000fcc:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <System_Clock_Init+0x1b8>)
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <System_Clock_Init+0x1b8>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <System_Clock_Init+0x1b8>)
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <System_Clock_Init+0x1b8>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <System_Clock_Init+0x1b8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <System_Clock_Init+0x1b8>)
 8000fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ff0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000ff2:	bf00      	nop
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <System_Clock_Init+0x1b8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f9      	beq.n	8000ff4 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <System_Clock_Init+0x1b8>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <System_Clock_Init+0x1b8>)
 8001008:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <System_Clock_Init+0x1b8>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <System_Clock_Init+0x1b8>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40022000 	.word	0x40022000
 800102c:	40021000 	.word	0x40021000

08001030 <printf>:
#include <stdio.h>

#define BUFFER_MAX (80)
static uint8_t buffer[BUFFER_MAX];

int printf (const char* format, ...){
 8001030:	b40f      	push	{r0, r1, r2, r3}
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0

	va_list aptr;
	int ret;

	va_start(aptr, format);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	603b      	str	r3, [r7, #0]
	ret = vsprintf((char *)buffer,format, aptr);
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <printf+0x38>)
 8001044:	f000 fe26 	bl	8001c94 <vsiprintf>
 8001048:	6078      	str	r0, [r7, #4]
	va_end(aptr);

	USART_Write (USART2, buffer, ret);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	461a      	mov	r2, r3
 800104e:	4906      	ldr	r1, [pc, #24]	; (8001068 <printf+0x38>)
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <printf+0x3c>)
 8001052:	f7ff fc9f 	bl	8000994 <USART_Write>
	return ret;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20006fdc 	.word	0x20006fdc
 800106c:	40004400 	.word	0x40004400

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f000 fdb0 	bl	8001c04 <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20018000 	.word	0x20018000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	2000702c 	.word	0x2000702c
 80010d8:	20007050 	.word	0x20007050

080010dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <SystemInit+0x64>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <SystemInit+0x64>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <SystemInit+0x68>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a13      	ldr	r2, [pc, #76]	; (8001144 <SystemInit+0x68>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <SystemInit+0x68>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <SystemInit+0x68>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <SystemInit+0x68>)
 8001108:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800110c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001110:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <SystemInit+0x68>)
 8001114:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001118:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <SystemInit+0x68>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <SystemInit+0x68>)
 8001120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <SystemInit+0x68>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SystemInit+0x64>)
 800112e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001132:	609a      	str	r2, [r3, #8]
#endif
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	40021000 	.word	0x40021000

08001148 <get_count>:
static int flag = 0;

//global counter
static uint32_t one_second_elapsed = 0;

uint32_t* get_count(){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	return &counter;
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <get_count+0x10>)
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20007030 	.word	0x20007030

0800115c <init_systick>:

SYST* syst_access(){
	return systick;
}

void init_systick(){
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	systick->CSR = 0;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <init_systick+0x50>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer.
	systick->RVR = 80000000;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <init_systick+0x50>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <init_systick+0x54>)
 800116e:	605a      	str	r2, [r3, #4]
	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	systick->CSR |= 1 << 2;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <init_systick+0x50>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <init_systick+0x50>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0204 	orr.w	r2, r2, #4
 800117e:	601a      	str	r2, [r3, #0]

	systick->CSR |= 1 << 1;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <init_systick+0x50>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <init_systick+0x50>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0202 	orr.w	r2, r2, #2
 800118e:	601a      	str	r2, [r3, #0]
	// Set the enable bit in the CTRL (CSR) to start the timer.
	systick->CSR |= 1;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <init_systick+0x50>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <init_systick+0x50>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20006f28 	.word	0x20006f28
 80011b0:	04c4b400 	.word	0x04c4b400

080011b4 <SysTick_Handler>:

void SysTick_Handler(){
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	static uint32_t count = 0;
	counter++;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <SysTick_Handler+0x38>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <SysTick_Handler+0x38>)
 80011c0:	6013      	str	r3, [r2, #0]
	count++;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <SysTick_Handler+0x3c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <SysTick_Handler+0x3c>)
 80011ca:	6013      	str	r3, [r2, #0]
	//80000000 / systick->RVR
	if (count <= 10){
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <SysTick_Handler+0x3c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b0a      	cmp	r3, #10
 80011d2:	d805      	bhi.n	80011e0 <SysTick_Handler+0x2c>
		one_second_elapsed = 1;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <SysTick_Handler+0x40>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
		count = 0;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Handler+0x3c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
	}
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20007030 	.word	0x20007030
 80011f0:	20007038 	.word	0x20007038
 80011f4:	20007034 	.word	0x20007034

080011f8 <reset>:

void reset(){
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	counter = 0;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <reset+0x14>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20007030 	.word	0x20007030

08001210 <get_elapsed>:

uint32_t* get_elapsed(){
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	return &one_second_elapsed;
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <get_elapsed+0x10>)
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	20007034 	.word	0x20007034

08001224 <main>:
#include "midi.h"
#include "dac.h"
#include "adc.h"
#include "systick.h"
	
int main(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8001228:	f7ff fe24 	bl	8000e74 <System_Clock_Init>
	LED_Init(LED_PIN);
 800122c:	2005      	movs	r0, #5
 800122e:	f7ff fa01 	bl	8000634 <LED_Init>
	UART2_Init();
 8001232:	f7ff faa1 	bl	8000778 <UART2_Init>
	DAC_Init ();
 8001236:	f7ff fc3f 	bl	8000ab8 <DAC_Init>
	DAC_Start ();
 800123a:	f7ff fc6f 	bl	8000b1c <DAC_Start>
	init_systick();
 800123e:	f7ff ff8d 	bl	800115c <init_systick>

	//ask about timing, why is it off, button clicks within timeframe are messed up
	//where is the original usart writing handler, writing doesnt work now its commented.
	//how tf do i measure 1 second? does the handler run the entire time the button is pressed?
	//if so, check that a second is passed and the handler has been runing the entire time, then pause.
	runsong();
 8001242:	f000 f825 	bl	8001290 <runsong>
 8001246:	2300      	movs	r3, #0
	//run_adc_dac_demo();
	//midi_track(0);
	//midi_header(0);
	//GPIO_test();
	//get_delay(result, test);
}
 8001248:	4618      	mov	r0, r3
 800124a:	bd80      	pop	{r7, pc}

0800124c <local_echo>:
//	for (int i = 0; i < value; i++)
//		;
//}

//write a function that echos one character
void local_echo(uint8_t byte){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	if (byte == '\r'){
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b0d      	cmp	r3, #13
 800125a:	d10b      	bne.n	8001274 <local_echo+0x28>
		USART_Write(USART2, &byte, 1);
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <local_echo+0x3c>)
 8001264:	f7ff fb96 	bl	8000994 <USART_Write>
		USART_Write(USART2, &bs, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <local_echo+0x40>)
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <local_echo+0x3c>)
 800126e:	f7ff fb91 	bl	8000994 <USART_Write>

	}
	else{
		USART_Write(USART2, &byte, 1);
	}
}
 8001272:	e005      	b.n	8001280 <local_echo+0x34>
		USART_Write(USART2, &byte, 1);
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	2201      	movs	r2, #1
 8001278:	4619      	mov	r1, r3
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <local_echo+0x3c>)
 800127c:	f7ff fb8a 	bl	8000994 <USART_Write>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40004400 	.word	0x40004400
 800128c:	20006f2c 	.word	0x20006f2c

08001290 <runsong>:
	}
	(*counter)++;
}

//project part 2
void runsong(){
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
	printf("***REMOTE LED CONTROL MENU***\n\r"
 8001296:	485d      	ldr	r0, [pc, #372]	; (800140c <runsong+0x17c>)
 8001298:	f7ff feca 	bl	8001030 <printf>
			"PLAY - Play the song (LED On)\n\r"
			"PAUSE - Pause the song (LED Flash)\n\r"
			"STOP - Stop the song (LED off)\n\r"
			"HELP - Displays possible commands\n\r"
			"***REMOTE MODE ACTIVE***");
	LED_Init(PROJECT_LED);
 800129c:	2007      	movs	r0, #7
 800129e:	f7ff f9c9 	bl	8000634 <LED_Init>
	init_systick();
 80012a2:	f7ff ff5b 	bl	800115c <init_systick>
	GPIO_Init();
 80012a6:	f7ff f819 	bl	80002dc <GPIO_Init>
	int index = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	char command[16];
	uint8_t* flash = get_paused();
 80012ae:	f7ff f9b7 	bl	8000620 <get_paused>
 80012b2:	6238      	str	r0, [r7, #32]
	int count = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
	int track = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
	//int* flag = get_Flag();
	//int* local = get_local();
	uint8_t* remote = get_remote();
 80012bc:	f7ff f9a6 	bl	800060c <get_remote>
 80012c0:	61f8      	str	r0, [r7, #28]
	uint32_t* one_second_elapsed = get_elapsed();
 80012c2:	f7ff ffa5 	bl	8001210 <get_elapsed>
 80012c6:	61b8      	str	r0, [r7, #24]
	while(1){
		uint8_t byte = USART_Read_NB(USART2);
 80012c8:	4851      	ldr	r0, [pc, #324]	; (8001410 <runsong+0x180>)
 80012ca:	f7ff fb4d 	bl	8000968 <USART_Read_NB>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]
		local_echo(byte);
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ffb9 	bl	800124c <local_echo>
		one_second_elapsed = get_elapsed();
 80012da:	f7ff ff99 	bl	8001210 <get_elapsed>
 80012de:	61b8      	str	r0, [r7, #24]
		if ((*flash == 1) && (*one_second_elapsed == 1)){
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <runsong+0x6a>
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d104      	bne.n	80012fa <runsong+0x6a>
			//increment_time();
			LED_Toggle(PROJECT_LED);
 80012f0:	2007      	movs	r0, #7
 80012f2:	f7ff fa2a 	bl	800074a <LED_Toggle>
			one_second_elapsed = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
		}
		if (*remote == 1){
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d1e2      	bne.n	80012c8 <runsong+0x38>
			if (byte == 0){
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <runsong+0x80>
				local_echo(byte);
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff9e 	bl	800124c <local_echo>
			}
			if (byte == eol){
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b0d      	cmp	r3, #13
 8001314:	d16a      	bne.n	80013ec <runsong+0x15c>
				command [index] = 0;
 8001316:	1d3a      	adds	r2, r7, #4
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	4413      	add	r3, r2
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
				if(strcmp(command, "HELP") == 0){
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	493c      	ldr	r1, [pc, #240]	; (8001414 <runsong+0x184>)
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ff53 	bl	80001d0 <strcmp>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <runsong+0xae>
					printf("***REMOTE LED CONTROL MENU***\n\r"
 8001330:	4839      	ldr	r0, [pc, #228]	; (8001418 <runsong+0x188>)
 8001332:	f7ff fe7d 	bl	8001030 <printf>
							"NEXT - Show Next Song info\n\r"
							"PLAY - Play the song (LED On)\n\r"
							"PAUSE - Pause the song (LED Flash)\n\r"
							"STOP - Stop the song (LED off)\n\r"
							"HELP - Displays possible commands\n\r");
					*flash = 0;
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e053      	b.n	80013e6 <runsong+0x156>
				}
				else if(strcmp(command, "NEXT") == 0){
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4936      	ldr	r1, [pc, #216]	; (800141c <runsong+0x18c>)
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff44 	bl	80001d0 <strcmp>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10e      	bne.n	800136c <runsong+0xdc>
					if (track > 4){
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	2b04      	cmp	r3, #4
 8001352:	dd01      	ble.n	8001358 <runsong+0xc8>
						track = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
				}
					midi_track(track);
 8001358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800135a:	f7ff fd5f 	bl	8000e1c <midi_track>
					++track;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
					*flash = 0;
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	e03c      	b.n	80013e6 <runsong+0x156>
				}
				else if(strcmp(command, "PLAY") == 0){
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	492c      	ldr	r1, [pc, #176]	; (8001420 <runsong+0x190>)
 8001370:	4618      	mov	r0, r3
 8001372:	f7fe ff2d 	bl	80001d0 <strcmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10a      	bne.n	8001392 <runsong+0x102>
					printf("Playing song: %i\n\r", track);
 800137c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137e:	4829      	ldr	r0, [pc, #164]	; (8001424 <runsong+0x194>)
 8001380:	f7ff fe56 	bl	8001030 <printf>
					LED_On(PROJECT_LED);
 8001384:	2007      	movs	r0, #7
 8001386:	f7ff f9b3 	bl	80006f0 <LED_On>
					*flash = 0;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e029      	b.n	80013e6 <runsong+0x156>
					//play_song(track);
				}
				else if(strcmp(command, "STOP") == 0){
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4924      	ldr	r1, [pc, #144]	; (8001428 <runsong+0x198>)
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff1a 	bl	80001d0 <strcmp>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <runsong+0x126>
					printf("Song Stopped\n\r");
 80013a2:	4822      	ldr	r0, [pc, #136]	; (800142c <runsong+0x19c>)
 80013a4:	f7ff fe44 	bl	8001030 <printf>
					LED_Off(PROJECT_LED);
 80013a8:	2007      	movs	r0, #7
 80013aa:	f7ff f9b7 	bl	800071c <LED_Off>
					*flash = 0;
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e017      	b.n	80013e6 <runsong+0x156>
				}
				else if(strcmp(command, "PAUSE") == 0){
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	491d      	ldr	r1, [pc, #116]	; (8001430 <runsong+0x1a0>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff08 	bl	80001d0 <strcmp>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <runsong+0x150>
					printf("Song Paused\n\r");
 80013c6:	481b      	ldr	r0, [pc, #108]	; (8001434 <runsong+0x1a4>)
 80013c8:	f7ff fe32 	bl	8001030 <printf>
					*flash = 1;
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
					if (flash){
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <runsong+0x156>
						LED_Toggle(PROJECT_LED);
 80013d8:	2007      	movs	r0, #7
 80013da:	f7ff f9b6 	bl	800074a <LED_Toggle>
 80013de:	e002      	b.n	80013e6 <runsong+0x156>
					}
				}
				else{
					printf("Invalid Command!\n\r");
 80013e0:	4815      	ldr	r0, [pc, #84]	; (8001438 <runsong+0x1a8>)
 80013e2:	f7ff fe25 	bl	8001030 <printf>
				}
				index = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ea:	e00a      	b.n	8001402 <runsong+0x172>
			}
			else if (byte != 0){
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <runsong+0x172>
				command[index] = byte;
 80013f2:	1d3a      	adds	r2, r7, #4
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	4413      	add	r3, r2
 80013f8:	7dfa      	ldrb	r2, [r7, #23]
 80013fa:	701a      	strb	r2, [r3, #0]
				index++;
 80013fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fe:	3301      	adds	r3, #1
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			count++;
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	3301      	adds	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
	while(1){
 8001408:	e75e      	b.n	80012c8 <runsong+0x38>
 800140a:	bf00      	nop
 800140c:	08002678 	.word	0x08002678
 8001410:	40004400 	.word	0x40004400
 8001414:	0800276c 	.word	0x0800276c
 8001418:	08002774 	.word	0x08002774
 800141c:	08002850 	.word	0x08002850
 8001420:	08002858 	.word	0x08002858
 8001424:	08002860 	.word	0x08002860
 8001428:	08002874 	.word	0x08002874
 800142c:	0800287c 	.word	0x0800287c
 8001430:	0800288c 	.word	0x0800288c
 8001434:	08002894 	.word	0x08002894
 8001438:	080028a4 	.word	0x080028a4

0800143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff fe4c 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f000 fbd1 	bl	8001c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146e:	f7ff fed9 	bl	8001224 <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001474:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20006f94 	.word	0x20006f94
  ldr r2, =_sidata
 8001480:	080028f4 	.word	0x080028f4
  ldr r2, =_sbss
 8001484:	20006f94 	.word	0x20006f94
  ldr r4, =_ebss
 8001488:	20007050 	.word	0x20007050

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>
	...

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000703c 	.word	0x2000703c

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20006f2d 	.word	0x20006f2d

080014f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e014      	b.n	800152c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fa92 	bl	8000a3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	795b      	ldrb	r3, [r3, #5]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_DAC_Start+0x16>
 8001546:	2302      	movs	r3, #2
 8001548:	e03b      	b.n	80015c2 <HAL_DAC_Start+0x8e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6819      	ldr	r1, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2201      	movs	r2, #1
 8001564:	409a      	lsls	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10f      	bne.n	8001594 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800157e:	2b04      	cmp	r3, #4
 8001580:	d118      	bne.n	80015b4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0201 	orr.w	r2, r2, #1
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	e00f      	b.n	80015b4 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800159e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015a2:	d107      	bne.n	80015b4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0202 	orr.w	r2, r2, #2
 80015b2:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b088      	sub	sp, #32
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	795b      	ldrb	r3, [r3, #5]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_DAC_ConfigChannel+0x1c>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e107      	b.n	80017fa <HAL_DAC_ConfigChannel+0x22c>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2202      	movs	r2, #2
 80015f4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d174      	bne.n	80016e8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80015fe:	f7ff ff47 	bl	8001490 <HAL_GetTick>
 8001602:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d134      	bne.n	8001674 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800160a:	e011      	b.n	8001630 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800160c:	f7ff ff40 	bl	8001490 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d90a      	bls.n	8001630 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f043 0208 	orr.w	r2, r3, #8
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2203      	movs	r2, #3
 800162a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0e4      	b.n	80017fa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1e6      	bne.n	800160c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff ff32 	bl	80014a8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	6992      	ldr	r2, [r2, #24]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
 800164e:	e01e      	b.n	800168e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001650:	f7ff ff1e 	bl	8001490 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d90a      	bls.n	8001674 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f043 0208 	orr.w	r2, r3, #8
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2203      	movs	r2, #3
 800166e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0c2      	b.n	80017fa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167a:	2b00      	cmp	r3, #0
 800167c:	dbe8      	blt.n	8001650 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff ff12 	bl	80014a8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	6992      	ldr	r2, [r2, #24]
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	ea02 0103 	and.w	r1, r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	21ff      	movs	r1, #255	; 0xff
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	ea02 0103 	and.w	r1, r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11d      	bne.n	800172c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	221f      	movs	r2, #31
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2207      	movs	r2, #7
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	431a      	orrs	r2, r3
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43da      	mvns	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	400a      	ands	r2, r1
 8001790:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	22c0      	movs	r2, #192	; 0xc0
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e17f      	b.n	8001b14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8171 	beq.w	8001b0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d005      	beq.n	8001844 <HAL_GPIO_Init+0x40>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d130      	bne.n	80018a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187a:	2201      	movs	r2, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f003 0201 	and.w	r2, r3, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d118      	bne.n	80018e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d017      	beq.n	8001920 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	6939      	ldr	r1, [r7, #16]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80ac 	beq.w	8001b0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6613      	str	r3, [r2, #96]	; 0x60
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ce:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_GPIO_Init+0x334>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f8:	d025      	beq.n	8001a46 <HAL_GPIO_Init+0x242>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_GPIO_Init+0x338>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x23e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <HAL_GPIO_Init+0x33c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x23a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x340>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x236>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_GPIO_Init+0x344>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x232>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_GPIO_Init+0x348>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x22e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x34c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x22a>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a46:	2300      	movs	r3, #0
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a58:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8a:	4a32      	ldr	r2, [pc, #200]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ade:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f47f ae78 	bne.w	8001814 <HAL_GPIO_Init+0x10>
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	48000800 	.word	0x48000800
 8001b44:	48000c00 	.word	0x48000c00
 8001b48:	48001000 	.word	0x48001000
 8001b4c:	48001400 	.word	0x48001400
 8001b50:	48001800 	.word	0x48001800
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	041a      	lsls	r2, r3, #16
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43d9      	mvns	r1, r3
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	400b      	ands	r3, r1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f806 	bl	8001bec <HAL_GPIO_EXTI_Callback>
  }
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <__errno>:
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <__errno+0x8>)
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20006f30 	.word	0x20006f30

08001c10 <__libc_init_array>:
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4d0d      	ldr	r5, [pc, #52]	; (8001c48 <__libc_init_array+0x38>)
 8001c14:	4c0d      	ldr	r4, [pc, #52]	; (8001c4c <__libc_init_array+0x3c>)
 8001c16:	1b64      	subs	r4, r4, r5
 8001c18:	10a4      	asrs	r4, r4, #2
 8001c1a:	2600      	movs	r6, #0
 8001c1c:	42a6      	cmp	r6, r4
 8001c1e:	d109      	bne.n	8001c34 <__libc_init_array+0x24>
 8001c20:	4d0b      	ldr	r5, [pc, #44]	; (8001c50 <__libc_init_array+0x40>)
 8001c22:	4c0c      	ldr	r4, [pc, #48]	; (8001c54 <__libc_init_array+0x44>)
 8001c24:	f000 fc8e 	bl	8002544 <_init>
 8001c28:	1b64      	subs	r4, r4, r5
 8001c2a:	10a4      	asrs	r4, r4, #2
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	42a6      	cmp	r6, r4
 8001c30:	d105      	bne.n	8001c3e <__libc_init_array+0x2e>
 8001c32:	bd70      	pop	{r4, r5, r6, pc}
 8001c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c38:	4798      	blx	r3
 8001c3a:	3601      	adds	r6, #1
 8001c3c:	e7ee      	b.n	8001c1c <__libc_init_array+0xc>
 8001c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c42:	4798      	blx	r3
 8001c44:	3601      	adds	r6, #1
 8001c46:	e7f2      	b.n	8001c2e <__libc_init_array+0x1e>
 8001c48:	080028ec 	.word	0x080028ec
 8001c4c:	080028ec 	.word	0x080028ec
 8001c50:	080028ec 	.word	0x080028ec
 8001c54:	080028f0 	.word	0x080028f0

08001c58 <memset>:
 8001c58:	4402      	add	r2, r0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d100      	bne.n	8001c62 <memset+0xa>
 8001c60:	4770      	bx	lr
 8001c62:	f803 1b01 	strb.w	r1, [r3], #1
 8001c66:	e7f9      	b.n	8001c5c <memset+0x4>

08001c68 <_vsiprintf_r>:
 8001c68:	b500      	push	{lr}
 8001c6a:	b09b      	sub	sp, #108	; 0x6c
 8001c6c:	9100      	str	r1, [sp, #0]
 8001c6e:	9104      	str	r1, [sp, #16]
 8001c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c74:	9105      	str	r1, [sp, #20]
 8001c76:	9102      	str	r1, [sp, #8]
 8001c78:	4905      	ldr	r1, [pc, #20]	; (8001c90 <_vsiprintf_r+0x28>)
 8001c7a:	9103      	str	r1, [sp, #12]
 8001c7c:	4669      	mov	r1, sp
 8001c7e:	f000 f86f 	bl	8001d60 <_svfiprintf_r>
 8001c82:	9b00      	ldr	r3, [sp, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	b01b      	add	sp, #108	; 0x6c
 8001c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c8e:	bf00      	nop
 8001c90:	ffff0208 	.word	0xffff0208

08001c94 <vsiprintf>:
 8001c94:	4613      	mov	r3, r2
 8001c96:	460a      	mov	r2, r1
 8001c98:	4601      	mov	r1, r0
 8001c9a:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <vsiprintf+0x10>)
 8001c9c:	6800      	ldr	r0, [r0, #0]
 8001c9e:	f7ff bfe3 	b.w	8001c68 <_vsiprintf_r>
 8001ca2:	bf00      	nop
 8001ca4:	20006f30 	.word	0x20006f30

08001ca8 <__ssputs_r>:
 8001ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cac:	688e      	ldr	r6, [r1, #8]
 8001cae:	429e      	cmp	r6, r3
 8001cb0:	4682      	mov	sl, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	4690      	mov	r8, r2
 8001cb6:	461f      	mov	r7, r3
 8001cb8:	d838      	bhi.n	8001d2c <__ssputs_r+0x84>
 8001cba:	898a      	ldrh	r2, [r1, #12]
 8001cbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001cc0:	d032      	beq.n	8001d28 <__ssputs_r+0x80>
 8001cc2:	6825      	ldr	r5, [r4, #0]
 8001cc4:	6909      	ldr	r1, [r1, #16]
 8001cc6:	eba5 0901 	sub.w	r9, r5, r1
 8001cca:	6965      	ldr	r5, [r4, #20]
 8001ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	444b      	add	r3, r9
 8001cd8:	106d      	asrs	r5, r5, #1
 8001cda:	429d      	cmp	r5, r3
 8001cdc:	bf38      	it	cc
 8001cde:	461d      	movcc	r5, r3
 8001ce0:	0553      	lsls	r3, r2, #21
 8001ce2:	d531      	bpl.n	8001d48 <__ssputs_r+0xa0>
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f000 fb63 	bl	80023b0 <_malloc_r>
 8001cea:	4606      	mov	r6, r0
 8001cec:	b950      	cbnz	r0, 8001d04 <__ssputs_r+0x5c>
 8001cee:	230c      	movs	r3, #12
 8001cf0:	f8ca 3000 	str.w	r3, [sl]
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfa:	81a3      	strh	r3, [r4, #12]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d04:	6921      	ldr	r1, [r4, #16]
 8001d06:	464a      	mov	r2, r9
 8001d08:	f000 fabe 	bl	8002288 <memcpy>
 8001d0c:	89a3      	ldrh	r3, [r4, #12]
 8001d0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d16:	81a3      	strh	r3, [r4, #12]
 8001d18:	6126      	str	r6, [r4, #16]
 8001d1a:	6165      	str	r5, [r4, #20]
 8001d1c:	444e      	add	r6, r9
 8001d1e:	eba5 0509 	sub.w	r5, r5, r9
 8001d22:	6026      	str	r6, [r4, #0]
 8001d24:	60a5      	str	r5, [r4, #8]
 8001d26:	463e      	mov	r6, r7
 8001d28:	42be      	cmp	r6, r7
 8001d2a:	d900      	bls.n	8001d2e <__ssputs_r+0x86>
 8001d2c:	463e      	mov	r6, r7
 8001d2e:	6820      	ldr	r0, [r4, #0]
 8001d30:	4632      	mov	r2, r6
 8001d32:	4641      	mov	r1, r8
 8001d34:	f000 fab6 	bl	80022a4 <memmove>
 8001d38:	68a3      	ldr	r3, [r4, #8]
 8001d3a:	1b9b      	subs	r3, r3, r6
 8001d3c:	60a3      	str	r3, [r4, #8]
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	4433      	add	r3, r6
 8001d42:	6023      	str	r3, [r4, #0]
 8001d44:	2000      	movs	r0, #0
 8001d46:	e7db      	b.n	8001d00 <__ssputs_r+0x58>
 8001d48:	462a      	mov	r2, r5
 8001d4a:	f000 fba5 	bl	8002498 <_realloc_r>
 8001d4e:	4606      	mov	r6, r0
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d1e1      	bne.n	8001d18 <__ssputs_r+0x70>
 8001d54:	6921      	ldr	r1, [r4, #16]
 8001d56:	4650      	mov	r0, sl
 8001d58:	f000 fabe 	bl	80022d8 <_free_r>
 8001d5c:	e7c7      	b.n	8001cee <__ssputs_r+0x46>
	...

08001d60 <_svfiprintf_r>:
 8001d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d64:	4698      	mov	r8, r3
 8001d66:	898b      	ldrh	r3, [r1, #12]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	b09d      	sub	sp, #116	; 0x74
 8001d6c:	4607      	mov	r7, r0
 8001d6e:	460d      	mov	r5, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	d50e      	bpl.n	8001d92 <_svfiprintf_r+0x32>
 8001d74:	690b      	ldr	r3, [r1, #16]
 8001d76:	b963      	cbnz	r3, 8001d92 <_svfiprintf_r+0x32>
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	f000 fb19 	bl	80023b0 <_malloc_r>
 8001d7e:	6028      	str	r0, [r5, #0]
 8001d80:	6128      	str	r0, [r5, #16]
 8001d82:	b920      	cbnz	r0, 8001d8e <_svfiprintf_r+0x2e>
 8001d84:	230c      	movs	r3, #12
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	e0d1      	b.n	8001f32 <_svfiprintf_r+0x1d2>
 8001d8e:	2340      	movs	r3, #64	; 0x40
 8001d90:	616b      	str	r3, [r5, #20]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9309      	str	r3, [sp, #36]	; 0x24
 8001d96:	2320      	movs	r3, #32
 8001d98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001da0:	2330      	movs	r3, #48	; 0x30
 8001da2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001f4c <_svfiprintf_r+0x1ec>
 8001da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001daa:	f04f 0901 	mov.w	r9, #1
 8001dae:	4623      	mov	r3, r4
 8001db0:	469a      	mov	sl, r3
 8001db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001db6:	b10a      	cbz	r2, 8001dbc <_svfiprintf_r+0x5c>
 8001db8:	2a25      	cmp	r2, #37	; 0x25
 8001dba:	d1f9      	bne.n	8001db0 <_svfiprintf_r+0x50>
 8001dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8001dc0:	d00b      	beq.n	8001dda <_svfiprintf_r+0x7a>
 8001dc2:	465b      	mov	r3, fp
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	4638      	mov	r0, r7
 8001dca:	f7ff ff6d 	bl	8001ca8 <__ssputs_r>
 8001dce:	3001      	adds	r0, #1
 8001dd0:	f000 80aa 	beq.w	8001f28 <_svfiprintf_r+0x1c8>
 8001dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dd6:	445a      	add	r2, fp
 8001dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8001dda:	f89a 3000 	ldrb.w	r3, [sl]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80a2 	beq.w	8001f28 <_svfiprintf_r+0x1c8>
 8001de4:	2300      	movs	r3, #0
 8001de6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dee:	f10a 0a01 	add.w	sl, sl, #1
 8001df2:	9304      	str	r3, [sp, #16]
 8001df4:	9307      	str	r3, [sp, #28]
 8001df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8001dfc:	4654      	mov	r4, sl
 8001dfe:	2205      	movs	r2, #5
 8001e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e04:	4851      	ldr	r0, [pc, #324]	; (8001f4c <_svfiprintf_r+0x1ec>)
 8001e06:	f7fe f9f3 	bl	80001f0 <memchr>
 8001e0a:	9a04      	ldr	r2, [sp, #16]
 8001e0c:	b9d8      	cbnz	r0, 8001e46 <_svfiprintf_r+0xe6>
 8001e0e:	06d0      	lsls	r0, r2, #27
 8001e10:	bf44      	itt	mi
 8001e12:	2320      	movmi	r3, #32
 8001e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e18:	0711      	lsls	r1, r2, #28
 8001e1a:	bf44      	itt	mi
 8001e1c:	232b      	movmi	r3, #43	; 0x2b
 8001e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e22:	f89a 3000 	ldrb.w	r3, [sl]
 8001e26:	2b2a      	cmp	r3, #42	; 0x2a
 8001e28:	d015      	beq.n	8001e56 <_svfiprintf_r+0xf6>
 8001e2a:	9a07      	ldr	r2, [sp, #28]
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f04f 0c0a 	mov.w	ip, #10
 8001e34:	4621      	mov	r1, r4
 8001e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e3a:	3b30      	subs	r3, #48	; 0x30
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d94e      	bls.n	8001ede <_svfiprintf_r+0x17e>
 8001e40:	b1b0      	cbz	r0, 8001e70 <_svfiprintf_r+0x110>
 8001e42:	9207      	str	r2, [sp, #28]
 8001e44:	e014      	b.n	8001e70 <_svfiprintf_r+0x110>
 8001e46:	eba0 0308 	sub.w	r3, r0, r8
 8001e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	9304      	str	r3, [sp, #16]
 8001e52:	46a2      	mov	sl, r4
 8001e54:	e7d2      	b.n	8001dfc <_svfiprintf_r+0x9c>
 8001e56:	9b03      	ldr	r3, [sp, #12]
 8001e58:	1d19      	adds	r1, r3, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	9103      	str	r1, [sp, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bfbb      	ittet	lt
 8001e62:	425b      	neglt	r3, r3
 8001e64:	f042 0202 	orrlt.w	r2, r2, #2
 8001e68:	9307      	strge	r3, [sp, #28]
 8001e6a:	9307      	strlt	r3, [sp, #28]
 8001e6c:	bfb8      	it	lt
 8001e6e:	9204      	strlt	r2, [sp, #16]
 8001e70:	7823      	ldrb	r3, [r4, #0]
 8001e72:	2b2e      	cmp	r3, #46	; 0x2e
 8001e74:	d10c      	bne.n	8001e90 <_svfiprintf_r+0x130>
 8001e76:	7863      	ldrb	r3, [r4, #1]
 8001e78:	2b2a      	cmp	r3, #42	; 0x2a
 8001e7a:	d135      	bne.n	8001ee8 <_svfiprintf_r+0x188>
 8001e7c:	9b03      	ldr	r3, [sp, #12]
 8001e7e:	1d1a      	adds	r2, r3, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	9203      	str	r2, [sp, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bfb8      	it	lt
 8001e88:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e8c:	3402      	adds	r4, #2
 8001e8e:	9305      	str	r3, [sp, #20]
 8001e90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001f5c <_svfiprintf_r+0x1fc>
 8001e94:	7821      	ldrb	r1, [r4, #0]
 8001e96:	2203      	movs	r2, #3
 8001e98:	4650      	mov	r0, sl
 8001e9a:	f7fe f9a9 	bl	80001f0 <memchr>
 8001e9e:	b140      	cbz	r0, 8001eb2 <_svfiprintf_r+0x152>
 8001ea0:	2340      	movs	r3, #64	; 0x40
 8001ea2:	eba0 000a 	sub.w	r0, r0, sl
 8001ea6:	fa03 f000 	lsl.w	r0, r3, r0
 8001eaa:	9b04      	ldr	r3, [sp, #16]
 8001eac:	4303      	orrs	r3, r0
 8001eae:	3401      	adds	r4, #1
 8001eb0:	9304      	str	r3, [sp, #16]
 8001eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eb6:	4826      	ldr	r0, [pc, #152]	; (8001f50 <_svfiprintf_r+0x1f0>)
 8001eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	f7fe f997 	bl	80001f0 <memchr>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d038      	beq.n	8001f38 <_svfiprintf_r+0x1d8>
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <_svfiprintf_r+0x1f4>)
 8001ec8:	bb1b      	cbnz	r3, 8001f12 <_svfiprintf_r+0x1b2>
 8001eca:	9b03      	ldr	r3, [sp, #12]
 8001ecc:	3307      	adds	r3, #7
 8001ece:	f023 0307 	bic.w	r3, r3, #7
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	9303      	str	r3, [sp, #12]
 8001ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ed8:	4433      	add	r3, r6
 8001eda:	9309      	str	r3, [sp, #36]	; 0x24
 8001edc:	e767      	b.n	8001dae <_svfiprintf_r+0x4e>
 8001ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e7a5      	b.n	8001e34 <_svfiprintf_r+0xd4>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	3401      	adds	r4, #1
 8001eec:	9305      	str	r3, [sp, #20]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 0c0a 	mov.w	ip, #10
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001efa:	3a30      	subs	r2, #48	; 0x30
 8001efc:	2a09      	cmp	r2, #9
 8001efe:	d903      	bls.n	8001f08 <_svfiprintf_r+0x1a8>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0c5      	beq.n	8001e90 <_svfiprintf_r+0x130>
 8001f04:	9105      	str	r1, [sp, #20]
 8001f06:	e7c3      	b.n	8001e90 <_svfiprintf_r+0x130>
 8001f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e7f0      	b.n	8001ef4 <_svfiprintf_r+0x194>
 8001f12:	ab03      	add	r3, sp, #12
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	462a      	mov	r2, r5
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <_svfiprintf_r+0x1f8>)
 8001f1a:	a904      	add	r1, sp, #16
 8001f1c:	4638      	mov	r0, r7
 8001f1e:	f3af 8000 	nop.w
 8001f22:	1c42      	adds	r2, r0, #1
 8001f24:	4606      	mov	r6, r0
 8001f26:	d1d6      	bne.n	8001ed6 <_svfiprintf_r+0x176>
 8001f28:	89ab      	ldrh	r3, [r5, #12]
 8001f2a:	065b      	lsls	r3, r3, #25
 8001f2c:	f53f af2c 	bmi.w	8001d88 <_svfiprintf_r+0x28>
 8001f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f32:	b01d      	add	sp, #116	; 0x74
 8001f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f38:	ab03      	add	r3, sp, #12
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	462a      	mov	r2, r5
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <_svfiprintf_r+0x1f8>)
 8001f40:	a904      	add	r1, sp, #16
 8001f42:	4638      	mov	r0, r7
 8001f44:	f000 f87a 	bl	800203c <_printf_i>
 8001f48:	e7eb      	b.n	8001f22 <_svfiprintf_r+0x1c2>
 8001f4a:	bf00      	nop
 8001f4c:	080028b7 	.word	0x080028b7
 8001f50:	080028c1 	.word	0x080028c1
 8001f54:	00000000 	.word	0x00000000
 8001f58:	08001ca9 	.word	0x08001ca9
 8001f5c:	080028bd 	.word	0x080028bd

08001f60 <_printf_common>:
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	4616      	mov	r6, r2
 8001f66:	4699      	mov	r9, r3
 8001f68:	688a      	ldr	r2, [r1, #8]
 8001f6a:	690b      	ldr	r3, [r1, #16]
 8001f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	bfb8      	it	lt
 8001f74:	4613      	movlt	r3, r2
 8001f76:	6033      	str	r3, [r6, #0]
 8001f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f7c:	4607      	mov	r7, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	b10a      	cbz	r2, 8001f86 <_printf_common+0x26>
 8001f82:	3301      	adds	r3, #1
 8001f84:	6033      	str	r3, [r6, #0]
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	0699      	lsls	r1, r3, #26
 8001f8a:	bf42      	ittt	mi
 8001f8c:	6833      	ldrmi	r3, [r6, #0]
 8001f8e:	3302      	addmi	r3, #2
 8001f90:	6033      	strmi	r3, [r6, #0]
 8001f92:	6825      	ldr	r5, [r4, #0]
 8001f94:	f015 0506 	ands.w	r5, r5, #6
 8001f98:	d106      	bne.n	8001fa8 <_printf_common+0x48>
 8001f9a:	f104 0a19 	add.w	sl, r4, #25
 8001f9e:	68e3      	ldr	r3, [r4, #12]
 8001fa0:	6832      	ldr	r2, [r6, #0]
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	42ab      	cmp	r3, r5
 8001fa6:	dc26      	bgt.n	8001ff6 <_printf_common+0x96>
 8001fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fac:	1e13      	subs	r3, r2, #0
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	bf18      	it	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	0692      	lsls	r2, r2, #26
 8001fb6:	d42b      	bmi.n	8002010 <_printf_common+0xb0>
 8001fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	47c0      	blx	r8
 8001fc2:	3001      	adds	r0, #1
 8001fc4:	d01e      	beq.n	8002004 <_printf_common+0xa4>
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	68e5      	ldr	r5, [r4, #12]
 8001fca:	6832      	ldr	r2, [r6, #0]
 8001fcc:	f003 0306 	and.w	r3, r3, #6
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	bf08      	it	eq
 8001fd4:	1aad      	subeq	r5, r5, r2
 8001fd6:	68a3      	ldr	r3, [r4, #8]
 8001fd8:	6922      	ldr	r2, [r4, #16]
 8001fda:	bf0c      	ite	eq
 8001fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fe0:	2500      	movne	r5, #0
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	bfc4      	itt	gt
 8001fe6:	1a9b      	subgt	r3, r3, r2
 8001fe8:	18ed      	addgt	r5, r5, r3
 8001fea:	2600      	movs	r6, #0
 8001fec:	341a      	adds	r4, #26
 8001fee:	42b5      	cmp	r5, r6
 8001ff0:	d11a      	bne.n	8002028 <_printf_common+0xc8>
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e008      	b.n	8002008 <_printf_common+0xa8>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	4652      	mov	r2, sl
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	47c0      	blx	r8
 8002000:	3001      	adds	r0, #1
 8002002:	d103      	bne.n	800200c <_printf_common+0xac>
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800200c:	3501      	adds	r5, #1
 800200e:	e7c6      	b.n	8001f9e <_printf_common+0x3e>
 8002010:	18e1      	adds	r1, r4, r3
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	2030      	movs	r0, #48	; 0x30
 8002016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800201a:	4422      	add	r2, r4
 800201c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002024:	3302      	adds	r3, #2
 8002026:	e7c7      	b.n	8001fb8 <_printf_common+0x58>
 8002028:	2301      	movs	r3, #1
 800202a:	4622      	mov	r2, r4
 800202c:	4649      	mov	r1, r9
 800202e:	4638      	mov	r0, r7
 8002030:	47c0      	blx	r8
 8002032:	3001      	adds	r0, #1
 8002034:	d0e6      	beq.n	8002004 <_printf_common+0xa4>
 8002036:	3601      	adds	r6, #1
 8002038:	e7d9      	b.n	8001fee <_printf_common+0x8e>
	...

0800203c <_printf_i>:
 800203c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002040:	7e0f      	ldrb	r7, [r1, #24]
 8002042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002044:	2f78      	cmp	r7, #120	; 0x78
 8002046:	4691      	mov	r9, r2
 8002048:	4680      	mov	r8, r0
 800204a:	460c      	mov	r4, r1
 800204c:	469a      	mov	sl, r3
 800204e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002052:	d807      	bhi.n	8002064 <_printf_i+0x28>
 8002054:	2f62      	cmp	r7, #98	; 0x62
 8002056:	d80a      	bhi.n	800206e <_printf_i+0x32>
 8002058:	2f00      	cmp	r7, #0
 800205a:	f000 80d8 	beq.w	800220e <_printf_i+0x1d2>
 800205e:	2f58      	cmp	r7, #88	; 0x58
 8002060:	f000 80a3 	beq.w	80021aa <_printf_i+0x16e>
 8002064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800206c:	e03a      	b.n	80020e4 <_printf_i+0xa8>
 800206e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002072:	2b15      	cmp	r3, #21
 8002074:	d8f6      	bhi.n	8002064 <_printf_i+0x28>
 8002076:	a101      	add	r1, pc, #4	; (adr r1, 800207c <_printf_i+0x40>)
 8002078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800207c:	080020d5 	.word	0x080020d5
 8002080:	080020e9 	.word	0x080020e9
 8002084:	08002065 	.word	0x08002065
 8002088:	08002065 	.word	0x08002065
 800208c:	08002065 	.word	0x08002065
 8002090:	08002065 	.word	0x08002065
 8002094:	080020e9 	.word	0x080020e9
 8002098:	08002065 	.word	0x08002065
 800209c:	08002065 	.word	0x08002065
 80020a0:	08002065 	.word	0x08002065
 80020a4:	08002065 	.word	0x08002065
 80020a8:	080021f5 	.word	0x080021f5
 80020ac:	08002119 	.word	0x08002119
 80020b0:	080021d7 	.word	0x080021d7
 80020b4:	08002065 	.word	0x08002065
 80020b8:	08002065 	.word	0x08002065
 80020bc:	08002217 	.word	0x08002217
 80020c0:	08002065 	.word	0x08002065
 80020c4:	08002119 	.word	0x08002119
 80020c8:	08002065 	.word	0x08002065
 80020cc:	08002065 	.word	0x08002065
 80020d0:	080021df 	.word	0x080021df
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	602a      	str	r2, [r5, #0]
 80020dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0a3      	b.n	8002230 <_printf_i+0x1f4>
 80020e8:	6820      	ldr	r0, [r4, #0]
 80020ea:	6829      	ldr	r1, [r5, #0]
 80020ec:	0606      	lsls	r6, r0, #24
 80020ee:	f101 0304 	add.w	r3, r1, #4
 80020f2:	d50a      	bpl.n	800210a <_printf_i+0xce>
 80020f4:	680e      	ldr	r6, [r1, #0]
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	2e00      	cmp	r6, #0
 80020fa:	da03      	bge.n	8002104 <_printf_i+0xc8>
 80020fc:	232d      	movs	r3, #45	; 0x2d
 80020fe:	4276      	negs	r6, r6
 8002100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002104:	485e      	ldr	r0, [pc, #376]	; (8002280 <_printf_i+0x244>)
 8002106:	230a      	movs	r3, #10
 8002108:	e019      	b.n	800213e <_printf_i+0x102>
 800210a:	680e      	ldr	r6, [r1, #0]
 800210c:	602b      	str	r3, [r5, #0]
 800210e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002112:	bf18      	it	ne
 8002114:	b236      	sxthne	r6, r6
 8002116:	e7ef      	b.n	80020f8 <_printf_i+0xbc>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	6820      	ldr	r0, [r4, #0]
 800211c:	1d19      	adds	r1, r3, #4
 800211e:	6029      	str	r1, [r5, #0]
 8002120:	0601      	lsls	r1, r0, #24
 8002122:	d501      	bpl.n	8002128 <_printf_i+0xec>
 8002124:	681e      	ldr	r6, [r3, #0]
 8002126:	e002      	b.n	800212e <_printf_i+0xf2>
 8002128:	0646      	lsls	r6, r0, #25
 800212a:	d5fb      	bpl.n	8002124 <_printf_i+0xe8>
 800212c:	881e      	ldrh	r6, [r3, #0]
 800212e:	4854      	ldr	r0, [pc, #336]	; (8002280 <_printf_i+0x244>)
 8002130:	2f6f      	cmp	r7, #111	; 0x6f
 8002132:	bf0c      	ite	eq
 8002134:	2308      	moveq	r3, #8
 8002136:	230a      	movne	r3, #10
 8002138:	2100      	movs	r1, #0
 800213a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800213e:	6865      	ldr	r5, [r4, #4]
 8002140:	60a5      	str	r5, [r4, #8]
 8002142:	2d00      	cmp	r5, #0
 8002144:	bfa2      	ittt	ge
 8002146:	6821      	ldrge	r1, [r4, #0]
 8002148:	f021 0104 	bicge.w	r1, r1, #4
 800214c:	6021      	strge	r1, [r4, #0]
 800214e:	b90e      	cbnz	r6, 8002154 <_printf_i+0x118>
 8002150:	2d00      	cmp	r5, #0
 8002152:	d04d      	beq.n	80021f0 <_printf_i+0x1b4>
 8002154:	4615      	mov	r5, r2
 8002156:	fbb6 f1f3 	udiv	r1, r6, r3
 800215a:	fb03 6711 	mls	r7, r3, r1, r6
 800215e:	5dc7      	ldrb	r7, [r0, r7]
 8002160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002164:	4637      	mov	r7, r6
 8002166:	42bb      	cmp	r3, r7
 8002168:	460e      	mov	r6, r1
 800216a:	d9f4      	bls.n	8002156 <_printf_i+0x11a>
 800216c:	2b08      	cmp	r3, #8
 800216e:	d10b      	bne.n	8002188 <_printf_i+0x14c>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	07de      	lsls	r6, r3, #31
 8002174:	d508      	bpl.n	8002188 <_printf_i+0x14c>
 8002176:	6923      	ldr	r3, [r4, #16]
 8002178:	6861      	ldr	r1, [r4, #4]
 800217a:	4299      	cmp	r1, r3
 800217c:	bfde      	ittt	le
 800217e:	2330      	movle	r3, #48	; 0x30
 8002180:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002184:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002188:	1b52      	subs	r2, r2, r5
 800218a:	6122      	str	r2, [r4, #16]
 800218c:	f8cd a000 	str.w	sl, [sp]
 8002190:	464b      	mov	r3, r9
 8002192:	aa03      	add	r2, sp, #12
 8002194:	4621      	mov	r1, r4
 8002196:	4640      	mov	r0, r8
 8002198:	f7ff fee2 	bl	8001f60 <_printf_common>
 800219c:	3001      	adds	r0, #1
 800219e:	d14c      	bne.n	800223a <_printf_i+0x1fe>
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	b004      	add	sp, #16
 80021a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021aa:	4835      	ldr	r0, [pc, #212]	; (8002280 <_printf_i+0x244>)
 80021ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80021b0:	6829      	ldr	r1, [r5, #0]
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80021b8:	6029      	str	r1, [r5, #0]
 80021ba:	061d      	lsls	r5, r3, #24
 80021bc:	d514      	bpl.n	80021e8 <_printf_i+0x1ac>
 80021be:	07df      	lsls	r7, r3, #31
 80021c0:	bf44      	itt	mi
 80021c2:	f043 0320 	orrmi.w	r3, r3, #32
 80021c6:	6023      	strmi	r3, [r4, #0]
 80021c8:	b91e      	cbnz	r6, 80021d2 <_printf_i+0x196>
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f023 0320 	bic.w	r3, r3, #32
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	2310      	movs	r3, #16
 80021d4:	e7b0      	b.n	8002138 <_printf_i+0xfc>
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	f043 0320 	orr.w	r3, r3, #32
 80021dc:	6023      	str	r3, [r4, #0]
 80021de:	2378      	movs	r3, #120	; 0x78
 80021e0:	4828      	ldr	r0, [pc, #160]	; (8002284 <_printf_i+0x248>)
 80021e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021e6:	e7e3      	b.n	80021b0 <_printf_i+0x174>
 80021e8:	0659      	lsls	r1, r3, #25
 80021ea:	bf48      	it	mi
 80021ec:	b2b6      	uxthmi	r6, r6
 80021ee:	e7e6      	b.n	80021be <_printf_i+0x182>
 80021f0:	4615      	mov	r5, r2
 80021f2:	e7bb      	b.n	800216c <_printf_i+0x130>
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	6826      	ldr	r6, [r4, #0]
 80021f8:	6961      	ldr	r1, [r4, #20]
 80021fa:	1d18      	adds	r0, r3, #4
 80021fc:	6028      	str	r0, [r5, #0]
 80021fe:	0635      	lsls	r5, r6, #24
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	d501      	bpl.n	8002208 <_printf_i+0x1cc>
 8002204:	6019      	str	r1, [r3, #0]
 8002206:	e002      	b.n	800220e <_printf_i+0x1d2>
 8002208:	0670      	lsls	r0, r6, #25
 800220a:	d5fb      	bpl.n	8002204 <_printf_i+0x1c8>
 800220c:	8019      	strh	r1, [r3, #0]
 800220e:	2300      	movs	r3, #0
 8002210:	6123      	str	r3, [r4, #16]
 8002212:	4615      	mov	r5, r2
 8002214:	e7ba      	b.n	800218c <_printf_i+0x150>
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	1d1a      	adds	r2, r3, #4
 800221a:	602a      	str	r2, [r5, #0]
 800221c:	681d      	ldr	r5, [r3, #0]
 800221e:	6862      	ldr	r2, [r4, #4]
 8002220:	2100      	movs	r1, #0
 8002222:	4628      	mov	r0, r5
 8002224:	f7fd ffe4 	bl	80001f0 <memchr>
 8002228:	b108      	cbz	r0, 800222e <_printf_i+0x1f2>
 800222a:	1b40      	subs	r0, r0, r5
 800222c:	6060      	str	r0, [r4, #4]
 800222e:	6863      	ldr	r3, [r4, #4]
 8002230:	6123      	str	r3, [r4, #16]
 8002232:	2300      	movs	r3, #0
 8002234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002238:	e7a8      	b.n	800218c <_printf_i+0x150>
 800223a:	6923      	ldr	r3, [r4, #16]
 800223c:	462a      	mov	r2, r5
 800223e:	4649      	mov	r1, r9
 8002240:	4640      	mov	r0, r8
 8002242:	47d0      	blx	sl
 8002244:	3001      	adds	r0, #1
 8002246:	d0ab      	beq.n	80021a0 <_printf_i+0x164>
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	079b      	lsls	r3, r3, #30
 800224c:	d413      	bmi.n	8002276 <_printf_i+0x23a>
 800224e:	68e0      	ldr	r0, [r4, #12]
 8002250:	9b03      	ldr	r3, [sp, #12]
 8002252:	4298      	cmp	r0, r3
 8002254:	bfb8      	it	lt
 8002256:	4618      	movlt	r0, r3
 8002258:	e7a4      	b.n	80021a4 <_printf_i+0x168>
 800225a:	2301      	movs	r3, #1
 800225c:	4632      	mov	r2, r6
 800225e:	4649      	mov	r1, r9
 8002260:	4640      	mov	r0, r8
 8002262:	47d0      	blx	sl
 8002264:	3001      	adds	r0, #1
 8002266:	d09b      	beq.n	80021a0 <_printf_i+0x164>
 8002268:	3501      	adds	r5, #1
 800226a:	68e3      	ldr	r3, [r4, #12]
 800226c:	9903      	ldr	r1, [sp, #12]
 800226e:	1a5b      	subs	r3, r3, r1
 8002270:	42ab      	cmp	r3, r5
 8002272:	dcf2      	bgt.n	800225a <_printf_i+0x21e>
 8002274:	e7eb      	b.n	800224e <_printf_i+0x212>
 8002276:	2500      	movs	r5, #0
 8002278:	f104 0619 	add.w	r6, r4, #25
 800227c:	e7f5      	b.n	800226a <_printf_i+0x22e>
 800227e:	bf00      	nop
 8002280:	080028c8 	.word	0x080028c8
 8002284:	080028d9 	.word	0x080028d9

08002288 <memcpy>:
 8002288:	440a      	add	r2, r1
 800228a:	4291      	cmp	r1, r2
 800228c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002290:	d100      	bne.n	8002294 <memcpy+0xc>
 8002292:	4770      	bx	lr
 8002294:	b510      	push	{r4, lr}
 8002296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800229a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800229e:	4291      	cmp	r1, r2
 80022a0:	d1f9      	bne.n	8002296 <memcpy+0xe>
 80022a2:	bd10      	pop	{r4, pc}

080022a4 <memmove>:
 80022a4:	4288      	cmp	r0, r1
 80022a6:	b510      	push	{r4, lr}
 80022a8:	eb01 0402 	add.w	r4, r1, r2
 80022ac:	d902      	bls.n	80022b4 <memmove+0x10>
 80022ae:	4284      	cmp	r4, r0
 80022b0:	4623      	mov	r3, r4
 80022b2:	d807      	bhi.n	80022c4 <memmove+0x20>
 80022b4:	1e43      	subs	r3, r0, #1
 80022b6:	42a1      	cmp	r1, r4
 80022b8:	d008      	beq.n	80022cc <memmove+0x28>
 80022ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022c2:	e7f8      	b.n	80022b6 <memmove+0x12>
 80022c4:	4402      	add	r2, r0
 80022c6:	4601      	mov	r1, r0
 80022c8:	428a      	cmp	r2, r1
 80022ca:	d100      	bne.n	80022ce <memmove+0x2a>
 80022cc:	bd10      	pop	{r4, pc}
 80022ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80022d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80022d6:	e7f7      	b.n	80022c8 <memmove+0x24>

080022d8 <_free_r>:
 80022d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022da:	2900      	cmp	r1, #0
 80022dc:	d044      	beq.n	8002368 <_free_r+0x90>
 80022de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022e2:	9001      	str	r0, [sp, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f1a1 0404 	sub.w	r4, r1, #4
 80022ea:	bfb8      	it	lt
 80022ec:	18e4      	addlt	r4, r4, r3
 80022ee:	f000 f913 	bl	8002518 <__malloc_lock>
 80022f2:	4a1e      	ldr	r2, [pc, #120]	; (800236c <_free_r+0x94>)
 80022f4:	9801      	ldr	r0, [sp, #4]
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	b933      	cbnz	r3, 8002308 <_free_r+0x30>
 80022fa:	6063      	str	r3, [r4, #4]
 80022fc:	6014      	str	r4, [r2, #0]
 80022fe:	b003      	add	sp, #12
 8002300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002304:	f000 b90e 	b.w	8002524 <__malloc_unlock>
 8002308:	42a3      	cmp	r3, r4
 800230a:	d908      	bls.n	800231e <_free_r+0x46>
 800230c:	6825      	ldr	r5, [r4, #0]
 800230e:	1961      	adds	r1, r4, r5
 8002310:	428b      	cmp	r3, r1
 8002312:	bf01      	itttt	eq
 8002314:	6819      	ldreq	r1, [r3, #0]
 8002316:	685b      	ldreq	r3, [r3, #4]
 8002318:	1949      	addeq	r1, r1, r5
 800231a:	6021      	streq	r1, [r4, #0]
 800231c:	e7ed      	b.n	80022fa <_free_r+0x22>
 800231e:	461a      	mov	r2, r3
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	b10b      	cbz	r3, 8002328 <_free_r+0x50>
 8002324:	42a3      	cmp	r3, r4
 8002326:	d9fa      	bls.n	800231e <_free_r+0x46>
 8002328:	6811      	ldr	r1, [r2, #0]
 800232a:	1855      	adds	r5, r2, r1
 800232c:	42a5      	cmp	r5, r4
 800232e:	d10b      	bne.n	8002348 <_free_r+0x70>
 8002330:	6824      	ldr	r4, [r4, #0]
 8002332:	4421      	add	r1, r4
 8002334:	1854      	adds	r4, r2, r1
 8002336:	42a3      	cmp	r3, r4
 8002338:	6011      	str	r1, [r2, #0]
 800233a:	d1e0      	bne.n	80022fe <_free_r+0x26>
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	6053      	str	r3, [r2, #4]
 8002342:	4421      	add	r1, r4
 8002344:	6011      	str	r1, [r2, #0]
 8002346:	e7da      	b.n	80022fe <_free_r+0x26>
 8002348:	d902      	bls.n	8002350 <_free_r+0x78>
 800234a:	230c      	movs	r3, #12
 800234c:	6003      	str	r3, [r0, #0]
 800234e:	e7d6      	b.n	80022fe <_free_r+0x26>
 8002350:	6825      	ldr	r5, [r4, #0]
 8002352:	1961      	adds	r1, r4, r5
 8002354:	428b      	cmp	r3, r1
 8002356:	bf04      	itt	eq
 8002358:	6819      	ldreq	r1, [r3, #0]
 800235a:	685b      	ldreq	r3, [r3, #4]
 800235c:	6063      	str	r3, [r4, #4]
 800235e:	bf04      	itt	eq
 8002360:	1949      	addeq	r1, r1, r5
 8002362:	6021      	streq	r1, [r4, #0]
 8002364:	6054      	str	r4, [r2, #4]
 8002366:	e7ca      	b.n	80022fe <_free_r+0x26>
 8002368:	b003      	add	sp, #12
 800236a:	bd30      	pop	{r4, r5, pc}
 800236c:	20007040 	.word	0x20007040

08002370 <sbrk_aligned>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	4e0e      	ldr	r6, [pc, #56]	; (80023ac <sbrk_aligned+0x3c>)
 8002374:	460c      	mov	r4, r1
 8002376:	6831      	ldr	r1, [r6, #0]
 8002378:	4605      	mov	r5, r0
 800237a:	b911      	cbnz	r1, 8002382 <sbrk_aligned+0x12>
 800237c:	f000 f8bc 	bl	80024f8 <_sbrk_r>
 8002380:	6030      	str	r0, [r6, #0]
 8002382:	4621      	mov	r1, r4
 8002384:	4628      	mov	r0, r5
 8002386:	f000 f8b7 	bl	80024f8 <_sbrk_r>
 800238a:	1c43      	adds	r3, r0, #1
 800238c:	d00a      	beq.n	80023a4 <sbrk_aligned+0x34>
 800238e:	1cc4      	adds	r4, r0, #3
 8002390:	f024 0403 	bic.w	r4, r4, #3
 8002394:	42a0      	cmp	r0, r4
 8002396:	d007      	beq.n	80023a8 <sbrk_aligned+0x38>
 8002398:	1a21      	subs	r1, r4, r0
 800239a:	4628      	mov	r0, r5
 800239c:	f000 f8ac 	bl	80024f8 <_sbrk_r>
 80023a0:	3001      	adds	r0, #1
 80023a2:	d101      	bne.n	80023a8 <sbrk_aligned+0x38>
 80023a4:	f04f 34ff 	mov.w	r4, #4294967295
 80023a8:	4620      	mov	r0, r4
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	20007044 	.word	0x20007044

080023b0 <_malloc_r>:
 80023b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b4:	1ccd      	adds	r5, r1, #3
 80023b6:	f025 0503 	bic.w	r5, r5, #3
 80023ba:	3508      	adds	r5, #8
 80023bc:	2d0c      	cmp	r5, #12
 80023be:	bf38      	it	cc
 80023c0:	250c      	movcc	r5, #12
 80023c2:	2d00      	cmp	r5, #0
 80023c4:	4607      	mov	r7, r0
 80023c6:	db01      	blt.n	80023cc <_malloc_r+0x1c>
 80023c8:	42a9      	cmp	r1, r5
 80023ca:	d905      	bls.n	80023d8 <_malloc_r+0x28>
 80023cc:	230c      	movs	r3, #12
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	2600      	movs	r6, #0
 80023d2:	4630      	mov	r0, r6
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d8:	4e2e      	ldr	r6, [pc, #184]	; (8002494 <_malloc_r+0xe4>)
 80023da:	f000 f89d 	bl	8002518 <__malloc_lock>
 80023de:	6833      	ldr	r3, [r6, #0]
 80023e0:	461c      	mov	r4, r3
 80023e2:	bb34      	cbnz	r4, 8002432 <_malloc_r+0x82>
 80023e4:	4629      	mov	r1, r5
 80023e6:	4638      	mov	r0, r7
 80023e8:	f7ff ffc2 	bl	8002370 <sbrk_aligned>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	4604      	mov	r4, r0
 80023f0:	d14d      	bne.n	800248e <_malloc_r+0xde>
 80023f2:	6834      	ldr	r4, [r6, #0]
 80023f4:	4626      	mov	r6, r4
 80023f6:	2e00      	cmp	r6, #0
 80023f8:	d140      	bne.n	800247c <_malloc_r+0xcc>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	4631      	mov	r1, r6
 80023fe:	4638      	mov	r0, r7
 8002400:	eb04 0803 	add.w	r8, r4, r3
 8002404:	f000 f878 	bl	80024f8 <_sbrk_r>
 8002408:	4580      	cmp	r8, r0
 800240a:	d13a      	bne.n	8002482 <_malloc_r+0xd2>
 800240c:	6821      	ldr	r1, [r4, #0]
 800240e:	3503      	adds	r5, #3
 8002410:	1a6d      	subs	r5, r5, r1
 8002412:	f025 0503 	bic.w	r5, r5, #3
 8002416:	3508      	adds	r5, #8
 8002418:	2d0c      	cmp	r5, #12
 800241a:	bf38      	it	cc
 800241c:	250c      	movcc	r5, #12
 800241e:	4629      	mov	r1, r5
 8002420:	4638      	mov	r0, r7
 8002422:	f7ff ffa5 	bl	8002370 <sbrk_aligned>
 8002426:	3001      	adds	r0, #1
 8002428:	d02b      	beq.n	8002482 <_malloc_r+0xd2>
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	442b      	add	r3, r5
 800242e:	6023      	str	r3, [r4, #0]
 8002430:	e00e      	b.n	8002450 <_malloc_r+0xa0>
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	1b52      	subs	r2, r2, r5
 8002436:	d41e      	bmi.n	8002476 <_malloc_r+0xc6>
 8002438:	2a0b      	cmp	r2, #11
 800243a:	d916      	bls.n	800246a <_malloc_r+0xba>
 800243c:	1961      	adds	r1, r4, r5
 800243e:	42a3      	cmp	r3, r4
 8002440:	6025      	str	r5, [r4, #0]
 8002442:	bf18      	it	ne
 8002444:	6059      	strne	r1, [r3, #4]
 8002446:	6863      	ldr	r3, [r4, #4]
 8002448:	bf08      	it	eq
 800244a:	6031      	streq	r1, [r6, #0]
 800244c:	5162      	str	r2, [r4, r5]
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	4638      	mov	r0, r7
 8002452:	f104 060b 	add.w	r6, r4, #11
 8002456:	f000 f865 	bl	8002524 <__malloc_unlock>
 800245a:	f026 0607 	bic.w	r6, r6, #7
 800245e:	1d23      	adds	r3, r4, #4
 8002460:	1af2      	subs	r2, r6, r3
 8002462:	d0b6      	beq.n	80023d2 <_malloc_r+0x22>
 8002464:	1b9b      	subs	r3, r3, r6
 8002466:	50a3      	str	r3, [r4, r2]
 8002468:	e7b3      	b.n	80023d2 <_malloc_r+0x22>
 800246a:	6862      	ldr	r2, [r4, #4]
 800246c:	42a3      	cmp	r3, r4
 800246e:	bf0c      	ite	eq
 8002470:	6032      	streq	r2, [r6, #0]
 8002472:	605a      	strne	r2, [r3, #4]
 8002474:	e7ec      	b.n	8002450 <_malloc_r+0xa0>
 8002476:	4623      	mov	r3, r4
 8002478:	6864      	ldr	r4, [r4, #4]
 800247a:	e7b2      	b.n	80023e2 <_malloc_r+0x32>
 800247c:	4634      	mov	r4, r6
 800247e:	6876      	ldr	r6, [r6, #4]
 8002480:	e7b9      	b.n	80023f6 <_malloc_r+0x46>
 8002482:	230c      	movs	r3, #12
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4638      	mov	r0, r7
 8002488:	f000 f84c 	bl	8002524 <__malloc_unlock>
 800248c:	e7a1      	b.n	80023d2 <_malloc_r+0x22>
 800248e:	6025      	str	r5, [r4, #0]
 8002490:	e7de      	b.n	8002450 <_malloc_r+0xa0>
 8002492:	bf00      	nop
 8002494:	20007040 	.word	0x20007040

08002498 <_realloc_r>:
 8002498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249c:	4680      	mov	r8, r0
 800249e:	4614      	mov	r4, r2
 80024a0:	460e      	mov	r6, r1
 80024a2:	b921      	cbnz	r1, 80024ae <_realloc_r+0x16>
 80024a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024a8:	4611      	mov	r1, r2
 80024aa:	f7ff bf81 	b.w	80023b0 <_malloc_r>
 80024ae:	b92a      	cbnz	r2, 80024bc <_realloc_r+0x24>
 80024b0:	f7ff ff12 	bl	80022d8 <_free_r>
 80024b4:	4625      	mov	r5, r4
 80024b6:	4628      	mov	r0, r5
 80024b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024bc:	f000 f838 	bl	8002530 <_malloc_usable_size_r>
 80024c0:	4284      	cmp	r4, r0
 80024c2:	4607      	mov	r7, r0
 80024c4:	d802      	bhi.n	80024cc <_realloc_r+0x34>
 80024c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80024ca:	d812      	bhi.n	80024f2 <_realloc_r+0x5a>
 80024cc:	4621      	mov	r1, r4
 80024ce:	4640      	mov	r0, r8
 80024d0:	f7ff ff6e 	bl	80023b0 <_malloc_r>
 80024d4:	4605      	mov	r5, r0
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d0ed      	beq.n	80024b6 <_realloc_r+0x1e>
 80024da:	42bc      	cmp	r4, r7
 80024dc:	4622      	mov	r2, r4
 80024de:	4631      	mov	r1, r6
 80024e0:	bf28      	it	cs
 80024e2:	463a      	movcs	r2, r7
 80024e4:	f7ff fed0 	bl	8002288 <memcpy>
 80024e8:	4631      	mov	r1, r6
 80024ea:	4640      	mov	r0, r8
 80024ec:	f7ff fef4 	bl	80022d8 <_free_r>
 80024f0:	e7e1      	b.n	80024b6 <_realloc_r+0x1e>
 80024f2:	4635      	mov	r5, r6
 80024f4:	e7df      	b.n	80024b6 <_realloc_r+0x1e>
	...

080024f8 <_sbrk_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4d06      	ldr	r5, [pc, #24]	; (8002514 <_sbrk_r+0x1c>)
 80024fc:	2300      	movs	r3, #0
 80024fe:	4604      	mov	r4, r0
 8002500:	4608      	mov	r0, r1
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	f7fe fdb4 	bl	8001070 <_sbrk>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d102      	bne.n	8002512 <_sbrk_r+0x1a>
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	b103      	cbz	r3, 8002512 <_sbrk_r+0x1a>
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	20007048 	.word	0x20007048

08002518 <__malloc_lock>:
 8002518:	4801      	ldr	r0, [pc, #4]	; (8002520 <__malloc_lock+0x8>)
 800251a:	f000 b811 	b.w	8002540 <__retarget_lock_acquire_recursive>
 800251e:	bf00      	nop
 8002520:	2000704c 	.word	0x2000704c

08002524 <__malloc_unlock>:
 8002524:	4801      	ldr	r0, [pc, #4]	; (800252c <__malloc_unlock+0x8>)
 8002526:	f000 b80c 	b.w	8002542 <__retarget_lock_release_recursive>
 800252a:	bf00      	nop
 800252c:	2000704c 	.word	0x2000704c

08002530 <_malloc_usable_size_r>:
 8002530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002534:	1f18      	subs	r0, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	bfbc      	itt	lt
 800253a:	580b      	ldrlt	r3, [r1, r0]
 800253c:	18c0      	addlt	r0, r0, r3
 800253e:	4770      	bx	lr

08002540 <__retarget_lock_acquire_recursive>:
 8002540:	4770      	bx	lr

08002542 <__retarget_lock_release_recursive>:
 8002542:	4770      	bx	lr

08002544 <_init>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr

08002550 <_fini>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr
